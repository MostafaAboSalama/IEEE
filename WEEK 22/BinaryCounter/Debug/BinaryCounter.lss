
BinaryCounter.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000026d8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  000026d8  0000274c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002274  00000000  00000000  00002760  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00001188  00000000  00000000  000049d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  00005e0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007a55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008940  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  000096f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009850  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009add  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a2ab  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 ed       	ldi	r30, 0xD8	; 216
      68:	f6 e2       	ldi	r31, 0x26	; 38
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 37       	cpi	r26, 0x72	; 114
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 9b 05 	call	0xb36	; 0xb36 <main>
      7a:	0c 94 6a 13 	jmp	0x26d4	; 0x26d4 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a0 e6       	ldi	r26, 0x60	; 96
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 33 13 	jmp	0x2666	; 0x2666 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__stack+0x2f>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__stack+0x45>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__stack+0x1d>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__stack+0x2f>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__stack+0x2b>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__stack+0x45>
     484:	80 e6       	ldi	r24, 0x60	; 96
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__stack+0x1b7>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__stack+0x41>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__stack+0x1b7>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__stack+0x57>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__stack+0x1b7>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__stack+0xc3>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__stack+0xb7>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__stack+0xdf>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__stack+0xf9>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__stack+0x7f>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__stack+0x13d>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__stack+0x131>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__stack+0x10f>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__stack+0x15b>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__stack+0x143>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__stack+0x19d>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__stack+0x19d>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__stack+0x19d>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__stack+0x1a7>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 43 13 	jmp	0x2686	; 0x2686 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__pack_f+0x178>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__pack_f+0x172>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__pack_f+0x17c>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__pack_f+0x114>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__pack_f+0x76>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__pack_f+0xca>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__pack_f+0x86>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__pack_f+0x7e>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__pack_f+0x9c>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__pack_f+0x94>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__pack_f+0xbe>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__pack_f+0xee>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__pack_f+0xf6>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__pack_f+0xf6>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__pack_f+0x10e>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__pack_f+0x162>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__pack_f+0x172>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__pack_f+0x144>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__pack_f+0x154>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__pack_f+0x14c>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__pack_f+0x162>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__pack_f+0x164>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__pack_f+0x17c>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <main>:
#include "../4-LIB/BIT_MATH.H"
#include "../4-LIB/STD_TYPES.H"
#include "../2-HAL/01_LED/LED_interface.h"

int main()
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62


	while(1)
	{
		LED_voidBinaryCounter(LED_PORTC);
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	0e 94 b5 0c 	call	0x196a	; 0x196a <LED_voidBinaryCounter>
     b44:	fc cf       	rjmp	.-8      	; 0xb3e <main+0x8>

00000b46 <LCD_voidInit>:
#include "LCD_private.h"
#include "LCD_config.h"
#include "util/delay.h"

void LCD_voidInit()
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c4 55       	subi	r28, 0x54	; 84
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(LCD_CTRL_PORT, DIO_PORT_OUTPUT);
     b60:	83 e0       	ldi	r24, 0x03	; 3
     b62:	6f ef       	ldi	r22, 0xFF	; 255
     b64:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_enumSetPortDirection>
	DIO_enumSetPortDirection(LCD_DATA_PORT, DIO_PORT_OUTPUT);
     b68:	82 e0       	ldi	r24, 0x02	; 2
     b6a:	6f ef       	ldi	r22, 0xFF	; 255
     b6c:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_enumSetPortDirection>
     b70:	fe 01       	movw	r30, r28
     b72:	ef 5a       	subi	r30, 0xAF	; 175
     b74:	ff 4f       	sbci	r31, 0xFF	; 255
     b76:	80 e0       	ldi	r24, 0x00	; 0
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	a0 ef       	ldi	r26, 0xF0	; 240
     b7c:	b1 e4       	ldi	r27, 0x41	; 65
     b7e:	80 83       	st	Z, r24
     b80:	91 83       	std	Z+1, r25	; 0x01
     b82:	a2 83       	std	Z+2, r26	; 0x02
     b84:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b86:	8e 01       	movw	r16, r28
     b88:	03 5b       	subi	r16, 0xB3	; 179
     b8a:	1f 4f       	sbci	r17, 0xFF	; 255
     b8c:	fe 01       	movw	r30, r28
     b8e:	ef 5a       	subi	r30, 0xAF	; 175
     b90:	ff 4f       	sbci	r31, 0xFF	; 255
     b92:	60 81       	ld	r22, Z
     b94:	71 81       	ldd	r23, Z+1	; 0x01
     b96:	82 81       	ldd	r24, Z+2	; 0x02
     b98:	93 81       	ldd	r25, Z+3	; 0x03
     b9a:	20 e0       	ldi	r18, 0x00	; 0
     b9c:	30 e0       	ldi	r19, 0x00	; 0
     b9e:	4a e7       	ldi	r20, 0x7A	; 122
     ba0:	53 e4       	ldi	r21, 0x43	; 67
     ba2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ba6:	dc 01       	movw	r26, r24
     ba8:	cb 01       	movw	r24, r22
     baa:	f8 01       	movw	r30, r16
     bac:	80 83       	st	Z, r24
     bae:	91 83       	std	Z+1, r25	; 0x01
     bb0:	a2 83       	std	Z+2, r26	; 0x02
     bb2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     bb4:	fe 01       	movw	r30, r28
     bb6:	e3 5b       	subi	r30, 0xB3	; 179
     bb8:	ff 4f       	sbci	r31, 0xFF	; 255
     bba:	60 81       	ld	r22, Z
     bbc:	71 81       	ldd	r23, Z+1	; 0x01
     bbe:	82 81       	ldd	r24, Z+2	; 0x02
     bc0:	93 81       	ldd	r25, Z+3	; 0x03
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	40 e8       	ldi	r20, 0x80	; 128
     bc8:	5f e3       	ldi	r21, 0x3F	; 63
     bca:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bce:	88 23       	and	r24, r24
     bd0:	44 f4       	brge	.+16     	; 0xbe2 <LCD_voidInit+0x9c>
		__ticks = 1;
     bd2:	fe 01       	movw	r30, r28
     bd4:	e5 5b       	subi	r30, 0xB5	; 181
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	80 83       	st	Z, r24
     be0:	64 c0       	rjmp	.+200    	; 0xcaa <LCD_voidInit+0x164>
	else if (__tmp > 65535)
     be2:	fe 01       	movw	r30, r28
     be4:	e3 5b       	subi	r30, 0xB3	; 179
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	60 81       	ld	r22, Z
     bea:	71 81       	ldd	r23, Z+1	; 0x01
     bec:	82 81       	ldd	r24, Z+2	; 0x02
     bee:	93 81       	ldd	r25, Z+3	; 0x03
     bf0:	20 e0       	ldi	r18, 0x00	; 0
     bf2:	3f ef       	ldi	r19, 0xFF	; 255
     bf4:	4f e7       	ldi	r20, 0x7F	; 127
     bf6:	57 e4       	ldi	r21, 0x47	; 71
     bf8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bfc:	18 16       	cp	r1, r24
     bfe:	0c f0       	brlt	.+2      	; 0xc02 <LCD_voidInit+0xbc>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <LCD_voidInit+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c02:	fe 01       	movw	r30, r28
     c04:	ef 5a       	subi	r30, 0xAF	; 175
     c06:	ff 4f       	sbci	r31, 0xFF	; 255
     c08:	60 81       	ld	r22, Z
     c0a:	71 81       	ldd	r23, Z+1	; 0x01
     c0c:	82 81       	ldd	r24, Z+2	; 0x02
     c0e:	93 81       	ldd	r25, Z+3	; 0x03
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	40 e2       	ldi	r20, 0x20	; 32
     c16:	51 e4       	ldi	r21, 0x41	; 65
     c18:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8e 01       	movw	r16, r28
     c22:	05 5b       	subi	r16, 0xB5	; 181
     c24:	1f 4f       	sbci	r17, 0xFF	; 255
     c26:	bc 01       	movw	r22, r24
     c28:	cd 01       	movw	r24, r26
     c2a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c2e:	dc 01       	movw	r26, r24
     c30:	cb 01       	movw	r24, r22
     c32:	f8 01       	movw	r30, r16
     c34:	91 83       	std	Z+1, r25	; 0x01
     c36:	80 83       	st	Z, r24
     c38:	1f c0       	rjmp	.+62     	; 0xc78 <LCD_voidInit+0x132>
     c3a:	fe 01       	movw	r30, r28
     c3c:	e7 5b       	subi	r30, 0xB7	; 183
     c3e:	ff 4f       	sbci	r31, 0xFF	; 255
     c40:	89 e1       	ldi	r24, 0x19	; 25
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	91 83       	std	Z+1, r25	; 0x01
     c46:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c48:	fe 01       	movw	r30, r28
     c4a:	e7 5b       	subi	r30, 0xB7	; 183
     c4c:	ff 4f       	sbci	r31, 0xFF	; 255
     c4e:	80 81       	ld	r24, Z
     c50:	91 81       	ldd	r25, Z+1	; 0x01
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <LCD_voidInit+0x10c>
     c56:	fe 01       	movw	r30, r28
     c58:	e7 5b       	subi	r30, 0xB7	; 183
     c5a:	ff 4f       	sbci	r31, 0xFF	; 255
     c5c:	91 83       	std	Z+1, r25	; 0x01
     c5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c60:	de 01       	movw	r26, r28
     c62:	a5 5b       	subi	r26, 0xB5	; 181
     c64:	bf 4f       	sbci	r27, 0xFF	; 255
     c66:	fe 01       	movw	r30, r28
     c68:	e5 5b       	subi	r30, 0xB5	; 181
     c6a:	ff 4f       	sbci	r31, 0xFF	; 255
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	11 96       	adiw	r26, 0x01	; 1
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c78:	fe 01       	movw	r30, r28
     c7a:	e5 5b       	subi	r30, 0xB5	; 181
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	80 81       	ld	r24, Z
     c80:	91 81       	ldd	r25, Z+1	; 0x01
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	d1 f6       	brne	.-76     	; 0xc3a <LCD_voidInit+0xf4>
     c86:	27 c0       	rjmp	.+78     	; 0xcd6 <LCD_voidInit+0x190>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c88:	8e 01       	movw	r16, r28
     c8a:	05 5b       	subi	r16, 0xB5	; 181
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	fe 01       	movw	r30, r28
     c90:	e3 5b       	subi	r30, 0xB3	; 179
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	f8 01       	movw	r30, r16
     ca6:	91 83       	std	Z+1, r25	; 0x01
     ca8:	80 83       	st	Z, r24
     caa:	de 01       	movw	r26, r28
     cac:	a9 5b       	subi	r26, 0xB9	; 185
     cae:	bf 4f       	sbci	r27, 0xFF	; 255
     cb0:	fe 01       	movw	r30, r28
     cb2:	e5 5b       	subi	r30, 0xB5	; 181
     cb4:	ff 4f       	sbci	r31, 0xFF	; 255
     cb6:	80 81       	ld	r24, Z
     cb8:	91 81       	ldd	r25, Z+1	; 0x01
     cba:	8d 93       	st	X+, r24
     cbc:	9c 93       	st	X, r25
     cbe:	fe 01       	movw	r30, r28
     cc0:	e9 5b       	subi	r30, 0xB9	; 185
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 81       	ld	r24, Z
     cc6:	91 81       	ldd	r25, Z+1	; 0x01
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <LCD_voidInit+0x182>
     ccc:	fe 01       	movw	r30, r28
     cce:	e9 5b       	subi	r30, 0xB9	; 185
     cd0:	ff 4f       	sbci	r31, 0xFF	; 255
     cd2:	91 83       	std	Z+1, r25	; 0x01
     cd4:	80 83       	st	Z, r24
	//DIO_enumSetPortValue(LCD_CTRL_PORT, DIO_PORT_HIGH);
	_delay_ms(30);

	LCD_voidSendCommand(LCD_HOME);
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
     cdc:	fe 01       	movw	r30, r28
     cde:	ed 5b       	subi	r30, 0xBD	; 189
     ce0:	ff 4f       	sbci	r31, 0xFF	; 255
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	a0 e8       	ldi	r26, 0x80	; 128
     ce8:	bf e3       	ldi	r27, 0x3F	; 63
     cea:	80 83       	st	Z, r24
     cec:	91 83       	std	Z+1, r25	; 0x01
     cee:	a2 83       	std	Z+2, r26	; 0x02
     cf0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	8e 01       	movw	r16, r28
     cf4:	01 5c       	subi	r16, 0xC1	; 193
     cf6:	1f 4f       	sbci	r17, 0xFF	; 255
     cf8:	fe 01       	movw	r30, r28
     cfa:	ed 5b       	subi	r30, 0xBD	; 189
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	60 81       	ld	r22, Z
     d00:	71 81       	ldd	r23, Z+1	; 0x01
     d02:	82 81       	ldd	r24, Z+2	; 0x02
     d04:	93 81       	ldd	r25, Z+3	; 0x03
     d06:	20 e0       	ldi	r18, 0x00	; 0
     d08:	30 e0       	ldi	r19, 0x00	; 0
     d0a:	4a e7       	ldi	r20, 0x7A	; 122
     d0c:	53 e4       	ldi	r21, 0x43	; 67
     d0e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d12:	dc 01       	movw	r26, r24
     d14:	cb 01       	movw	r24, r22
     d16:	f8 01       	movw	r30, r16
     d18:	80 83       	st	Z, r24
     d1a:	91 83       	std	Z+1, r25	; 0x01
     d1c:	a2 83       	std	Z+2, r26	; 0x02
     d1e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d20:	fe 01       	movw	r30, r28
     d22:	ff 96       	adiw	r30, 0x3f	; 63
     d24:	60 81       	ld	r22, Z
     d26:	71 81       	ldd	r23, Z+1	; 0x01
     d28:	82 81       	ldd	r24, Z+2	; 0x02
     d2a:	93 81       	ldd	r25, Z+3	; 0x03
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	40 e8       	ldi	r20, 0x80	; 128
     d32:	5f e3       	ldi	r21, 0x3F	; 63
     d34:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d38:	88 23       	and	r24, r24
     d3a:	2c f4       	brge	.+10     	; 0xd46 <LCD_voidInit+0x200>
		__ticks = 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	9e af       	std	Y+62, r25	; 0x3e
     d42:	8d af       	std	Y+61, r24	; 0x3d
     d44:	46 c0       	rjmp	.+140    	; 0xdd2 <LCD_voidInit+0x28c>
	else if (__tmp > 65535)
     d46:	fe 01       	movw	r30, r28
     d48:	ff 96       	adiw	r30, 0x3f	; 63
     d4a:	60 81       	ld	r22, Z
     d4c:	71 81       	ldd	r23, Z+1	; 0x01
     d4e:	82 81       	ldd	r24, Z+2	; 0x02
     d50:	93 81       	ldd	r25, Z+3	; 0x03
     d52:	20 e0       	ldi	r18, 0x00	; 0
     d54:	3f ef       	ldi	r19, 0xFF	; 255
     d56:	4f e7       	ldi	r20, 0x7F	; 127
     d58:	57 e4       	ldi	r21, 0x47	; 71
     d5a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     d5e:	18 16       	cp	r1, r24
     d60:	64 f5       	brge	.+88     	; 0xdba <LCD_voidInit+0x274>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d62:	fe 01       	movw	r30, r28
     d64:	ed 5b       	subi	r30, 0xBD	; 189
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	40 e2       	ldi	r20, 0x20	; 32
     d76:	51 e4       	ldi	r21, 0x41	; 65
     d78:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	bc 01       	movw	r22, r24
     d82:	cd 01       	movw	r24, r26
     d84:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	9e af       	std	Y+62, r25	; 0x3e
     d8e:	8d af       	std	Y+61, r24	; 0x3d
     d90:	0f c0       	rjmp	.+30     	; 0xdb0 <LCD_voidInit+0x26a>
     d92:	89 e1       	ldi	r24, 0x19	; 25
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	9c af       	std	Y+60, r25	; 0x3c
     d98:	8b af       	std	Y+59, r24	; 0x3b
     d9a:	8b ad       	ldd	r24, Y+59	; 0x3b
     d9c:	9c ad       	ldd	r25, Y+60	; 0x3c
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <LCD_voidInit+0x258>
     da2:	9c af       	std	Y+60, r25	; 0x3c
     da4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     da6:	8d ad       	ldd	r24, Y+61	; 0x3d
     da8:	9e ad       	ldd	r25, Y+62	; 0x3e
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	9e af       	std	Y+62, r25	; 0x3e
     dae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     db0:	8d ad       	ldd	r24, Y+61	; 0x3d
     db2:	9e ad       	ldd	r25, Y+62	; 0x3e
     db4:	00 97       	sbiw	r24, 0x00	; 0
     db6:	69 f7       	brne	.-38     	; 0xd92 <LCD_voidInit+0x24c>
     db8:	16 c0       	rjmp	.+44     	; 0xde6 <LCD_voidInit+0x2a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dba:	fe 01       	movw	r30, r28
     dbc:	ff 96       	adiw	r30, 0x3f	; 63
     dbe:	60 81       	ld	r22, Z
     dc0:	71 81       	ldd	r23, Z+1	; 0x01
     dc2:	82 81       	ldd	r24, Z+2	; 0x02
     dc4:	93 81       	ldd	r25, Z+3	; 0x03
     dc6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dca:	dc 01       	movw	r26, r24
     dcc:	cb 01       	movw	r24, r22
     dce:	9e af       	std	Y+62, r25	; 0x3e
     dd0:	8d af       	std	Y+61, r24	; 0x3d
     dd2:	8d ad       	ldd	r24, Y+61	; 0x3d
     dd4:	9e ad       	ldd	r25, Y+62	; 0x3e
     dd6:	9a af       	std	Y+58, r25	; 0x3a
     dd8:	89 af       	std	Y+57, r24	; 0x39
     dda:	89 ad       	ldd	r24, Y+57	; 0x39
     ddc:	9a ad       	ldd	r25, Y+58	; 0x3a
     dde:	01 97       	sbiw	r24, 0x01	; 1
     de0:	f1 f7       	brne	.-4      	; 0xdde <LCD_voidInit+0x298>
     de2:	9a af       	std	Y+58, r25	; 0x3a
     de4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);

	LCD_voidSendCommand(0X38);
     de6:	88 e3       	ldi	r24, 0x38	; 56
     de8:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a0 e8       	ldi	r26, 0x80	; 128
     df2:	bf e3       	ldi	r27, 0x3F	; 63
     df4:	8d ab       	std	Y+53, r24	; 0x35
     df6:	9e ab       	std	Y+54, r25	; 0x36
     df8:	af ab       	std	Y+55, r26	; 0x37
     dfa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dfc:	6d a9       	ldd	r22, Y+53	; 0x35
     dfe:	7e a9       	ldd	r23, Y+54	; 0x36
     e00:	8f a9       	ldd	r24, Y+55	; 0x37
     e02:	98 ad       	ldd	r25, Y+56	; 0x38
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	4a e7       	ldi	r20, 0x7A	; 122
     e0a:	53 e4       	ldi	r21, 0x43	; 67
     e0c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	89 ab       	std	Y+49, r24	; 0x31
     e16:	9a ab       	std	Y+50, r25	; 0x32
     e18:	ab ab       	std	Y+51, r26	; 0x33
     e1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     e1c:	69 a9       	ldd	r22, Y+49	; 0x31
     e1e:	7a a9       	ldd	r23, Y+50	; 0x32
     e20:	8b a9       	ldd	r24, Y+51	; 0x33
     e22:	9c a9       	ldd	r25, Y+52	; 0x34
     e24:	20 e0       	ldi	r18, 0x00	; 0
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	40 e8       	ldi	r20, 0x80	; 128
     e2a:	5f e3       	ldi	r21, 0x3F	; 63
     e2c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e30:	88 23       	and	r24, r24
     e32:	2c f4       	brge	.+10     	; 0xe3e <LCD_voidInit+0x2f8>
		__ticks = 1;
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	98 ab       	std	Y+48, r25	; 0x30
     e3a:	8f a7       	std	Y+47, r24	; 0x2f
     e3c:	3f c0       	rjmp	.+126    	; 0xebc <LCD_voidInit+0x376>
	else if (__tmp > 65535)
     e3e:	69 a9       	ldd	r22, Y+49	; 0x31
     e40:	7a a9       	ldd	r23, Y+50	; 0x32
     e42:	8b a9       	ldd	r24, Y+51	; 0x33
     e44:	9c a9       	ldd	r25, Y+52	; 0x34
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	3f ef       	ldi	r19, 0xFF	; 255
     e4a:	4f e7       	ldi	r20, 0x7F	; 127
     e4c:	57 e4       	ldi	r21, 0x47	; 71
     e4e:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e52:	18 16       	cp	r1, r24
     e54:	4c f5       	brge	.+82     	; 0xea8 <LCD_voidInit+0x362>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e56:	6d a9       	ldd	r22, Y+53	; 0x35
     e58:	7e a9       	ldd	r23, Y+54	; 0x36
     e5a:	8f a9       	ldd	r24, Y+55	; 0x37
     e5c:	98 ad       	ldd	r25, Y+56	; 0x38
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	bc 01       	movw	r22, r24
     e70:	cd 01       	movw	r24, r26
     e72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e76:	dc 01       	movw	r26, r24
     e78:	cb 01       	movw	r24, r22
     e7a:	98 ab       	std	Y+48, r25	; 0x30
     e7c:	8f a7       	std	Y+47, r24	; 0x2f
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <LCD_voidInit+0x358>
     e80:	89 e1       	ldi	r24, 0x19	; 25
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	9e a7       	std	Y+46, r25	; 0x2e
     e86:	8d a7       	std	Y+45, r24	; 0x2d
     e88:	8d a5       	ldd	r24, Y+45	; 0x2d
     e8a:	9e a5       	ldd	r25, Y+46	; 0x2e
     e8c:	01 97       	sbiw	r24, 0x01	; 1
     e8e:	f1 f7       	brne	.-4      	; 0xe8c <LCD_voidInit+0x346>
     e90:	9e a7       	std	Y+46, r25	; 0x2e
     e92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e94:	8f a5       	ldd	r24, Y+47	; 0x2f
     e96:	98 a9       	ldd	r25, Y+48	; 0x30
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	98 ab       	std	Y+48, r25	; 0x30
     e9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e9e:	8f a5       	ldd	r24, Y+47	; 0x2f
     ea0:	98 a9       	ldd	r25, Y+48	; 0x30
     ea2:	00 97       	sbiw	r24, 0x00	; 0
     ea4:	69 f7       	brne	.-38     	; 0xe80 <LCD_voidInit+0x33a>
     ea6:	14 c0       	rjmp	.+40     	; 0xed0 <LCD_voidInit+0x38a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ea8:	69 a9       	ldd	r22, Y+49	; 0x31
     eaa:	7a a9       	ldd	r23, Y+50	; 0x32
     eac:	8b a9       	ldd	r24, Y+51	; 0x33
     eae:	9c a9       	ldd	r25, Y+52	; 0x34
     eb0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb4:	dc 01       	movw	r26, r24
     eb6:	cb 01       	movw	r24, r22
     eb8:	98 ab       	std	Y+48, r25	; 0x30
     eba:	8f a7       	std	Y+47, r24	; 0x2f
     ebc:	8f a5       	ldd	r24, Y+47	; 0x2f
     ebe:	98 a9       	ldd	r25, Y+48	; 0x30
     ec0:	9c a7       	std	Y+44, r25	; 0x2c
     ec2:	8b a7       	std	Y+43, r24	; 0x2b
     ec4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ec6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ec8:	01 97       	sbiw	r24, 0x01	; 1
     eca:	f1 f7       	brne	.-4      	; 0xec8 <LCD_voidInit+0x382>
     ecc:	9c a7       	std	Y+44, r25	; 0x2c
     ece:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);

	LCD_voidSendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
     ed0:	8c e0       	ldi	r24, 0x0C	; 12
     ed2:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	a0 e8       	ldi	r26, 0x80	; 128
     edc:	bf e3       	ldi	r27, 0x3F	; 63
     ede:	8f a3       	std	Y+39, r24	; 0x27
     ee0:	98 a7       	std	Y+40, r25	; 0x28
     ee2:	a9 a7       	std	Y+41, r26	; 0x29
     ee4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee6:	6f a1       	ldd	r22, Y+39	; 0x27
     ee8:	78 a5       	ldd	r23, Y+40	; 0x28
     eea:	89 a5       	ldd	r24, Y+41	; 0x29
     eec:	9a a5       	ldd	r25, Y+42	; 0x2a
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4a e7       	ldi	r20, 0x7A	; 122
     ef4:	53 e4       	ldi	r21, 0x43	; 67
     ef6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	8b a3       	std	Y+35, r24	; 0x23
     f00:	9c a3       	std	Y+36, r25	; 0x24
     f02:	ad a3       	std	Y+37, r26	; 0x25
     f04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     f06:	6b a1       	ldd	r22, Y+35	; 0x23
     f08:	7c a1       	ldd	r23, Y+36	; 0x24
     f0a:	8d a1       	ldd	r24, Y+37	; 0x25
     f0c:	9e a1       	ldd	r25, Y+38	; 0x26
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f1a:	88 23       	and	r24, r24
     f1c:	2c f4       	brge	.+10     	; 0xf28 <LCD_voidInit+0x3e2>
		__ticks = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9a a3       	std	Y+34, r25	; 0x22
     f24:	89 a3       	std	Y+33, r24	; 0x21
     f26:	3f c0       	rjmp	.+126    	; 0xfa6 <LCD_voidInit+0x460>
	else if (__tmp > 65535)
     f28:	6b a1       	ldd	r22, Y+35	; 0x23
     f2a:	7c a1       	ldd	r23, Y+36	; 0x24
     f2c:	8d a1       	ldd	r24, Y+37	; 0x25
     f2e:	9e a1       	ldd	r25, Y+38	; 0x26
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	3f ef       	ldi	r19, 0xFF	; 255
     f34:	4f e7       	ldi	r20, 0x7F	; 127
     f36:	57 e4       	ldi	r21, 0x47	; 71
     f38:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f3c:	18 16       	cp	r1, r24
     f3e:	4c f5       	brge	.+82     	; 0xf92 <LCD_voidInit+0x44c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f40:	6f a1       	ldd	r22, Y+39	; 0x27
     f42:	78 a5       	ldd	r23, Y+40	; 0x28
     f44:	89 a5       	ldd	r24, Y+41	; 0x29
     f46:	9a a5       	ldd	r25, Y+42	; 0x2a
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e2       	ldi	r20, 0x20	; 32
     f4e:	51 e4       	ldi	r21, 0x41	; 65
     f50:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	9a a3       	std	Y+34, r25	; 0x22
     f66:	89 a3       	std	Y+33, r24	; 0x21
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <LCD_voidInit+0x442>
     f6a:	89 e1       	ldi	r24, 0x19	; 25
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	98 a3       	std	Y+32, r25	; 0x20
     f70:	8f 8f       	std	Y+31, r24	; 0x1f
     f72:	8f 8d       	ldd	r24, Y+31	; 0x1f
     f74:	98 a1       	ldd	r25, Y+32	; 0x20
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <LCD_voidInit+0x430>
     f7a:	98 a3       	std	Y+32, r25	; 0x20
     f7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	89 a1       	ldd	r24, Y+33	; 0x21
     f80:	9a a1       	ldd	r25, Y+34	; 0x22
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9a a3       	std	Y+34, r25	; 0x22
     f86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f88:	89 a1       	ldd	r24, Y+33	; 0x21
     f8a:	9a a1       	ldd	r25, Y+34	; 0x22
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	69 f7       	brne	.-38     	; 0xf6a <LCD_voidInit+0x424>
     f90:	14 c0       	rjmp	.+40     	; 0xfba <LCD_voidInit+0x474>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f92:	6b a1       	ldd	r22, Y+35	; 0x23
     f94:	7c a1       	ldd	r23, Y+36	; 0x24
     f96:	8d a1       	ldd	r24, Y+37	; 0x25
     f98:	9e a1       	ldd	r25, Y+38	; 0x26
     f9a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9a a3       	std	Y+34, r25	; 0x22
     fa4:	89 a3       	std	Y+33, r24	; 0x21
     fa6:	89 a1       	ldd	r24, Y+33	; 0x21
     fa8:	9a a1       	ldd	r25, Y+34	; 0x22
     faa:	9e 8f       	std	Y+30, r25	; 0x1e
     fac:	8d 8f       	std	Y+29, r24	; 0x1d
     fae:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <LCD_voidInit+0x46c>
     fb6:	9e 8f       	std	Y+30, r25	; 0x1e
     fb8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	LCD_voidSendCommand(LCD_CLEAR);
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
     fc0:	80 e0       	ldi	r24, 0x00	; 0
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	a0 e0       	ldi	r26, 0x00	; 0
     fc6:	b0 e4       	ldi	r27, 0x40	; 64
     fc8:	89 8f       	std	Y+25, r24	; 0x19
     fca:	9a 8f       	std	Y+26, r25	; 0x1a
     fcc:	ab 8f       	std	Y+27, r26	; 0x1b
     fce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fd0:	69 8d       	ldd	r22, Y+25	; 0x19
     fd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	4a e7       	ldi	r20, 0x7A	; 122
     fde:	53 e4       	ldi	r21, 0x43	; 67
     fe0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     fe4:	dc 01       	movw	r26, r24
     fe6:	cb 01       	movw	r24, r22
     fe8:	8d 8b       	std	Y+21, r24	; 0x15
     fea:	9e 8b       	std	Y+22, r25	; 0x16
     fec:	af 8b       	std	Y+23, r26	; 0x17
     fee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     ff0:	6d 89       	ldd	r22, Y+21	; 0x15
     ff2:	7e 89       	ldd	r23, Y+22	; 0x16
     ff4:	8f 89       	ldd	r24, Y+23	; 0x17
     ff6:	98 8d       	ldd	r25, Y+24	; 0x18
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e8       	ldi	r20, 0x80	; 128
     ffe:	5f e3       	ldi	r21, 0x3F	; 63
    1000:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1004:	88 23       	and	r24, r24
    1006:	2c f4       	brge	.+10     	; 0x1012 <LCD_voidInit+0x4cc>
		__ticks = 1;
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	9c 8b       	std	Y+20, r25	; 0x14
    100e:	8b 8b       	std	Y+19, r24	; 0x13
    1010:	3f c0       	rjmp	.+126    	; 0x1090 <LCD_voidInit+0x54a>
	else if (__tmp > 65535)
    1012:	6d 89       	ldd	r22, Y+21	; 0x15
    1014:	7e 89       	ldd	r23, Y+22	; 0x16
    1016:	8f 89       	ldd	r24, Y+23	; 0x17
    1018:	98 8d       	ldd	r25, Y+24	; 0x18
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	3f ef       	ldi	r19, 0xFF	; 255
    101e:	4f e7       	ldi	r20, 0x7F	; 127
    1020:	57 e4       	ldi	r21, 0x47	; 71
    1022:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1026:	18 16       	cp	r1, r24
    1028:	4c f5       	brge	.+82     	; 0x107c <LCD_voidInit+0x536>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    102a:	69 8d       	ldd	r22, Y+25	; 0x19
    102c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    102e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1030:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e2       	ldi	r20, 0x20	; 32
    1038:	51 e4       	ldi	r21, 0x41	; 65
    103a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    103e:	dc 01       	movw	r26, r24
    1040:	cb 01       	movw	r24, r22
    1042:	bc 01       	movw	r22, r24
    1044:	cd 01       	movw	r24, r26
    1046:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    104a:	dc 01       	movw	r26, r24
    104c:	cb 01       	movw	r24, r22
    104e:	9c 8b       	std	Y+20, r25	; 0x14
    1050:	8b 8b       	std	Y+19, r24	; 0x13
    1052:	0f c0       	rjmp	.+30     	; 0x1072 <LCD_voidInit+0x52c>
    1054:	89 e1       	ldi	r24, 0x19	; 25
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	9a 8b       	std	Y+18, r25	; 0x12
    105a:	89 8b       	std	Y+17, r24	; 0x11
    105c:	89 89       	ldd	r24, Y+17	; 0x11
    105e:	9a 89       	ldd	r25, Y+18	; 0x12
    1060:	01 97       	sbiw	r24, 0x01	; 1
    1062:	f1 f7       	brne	.-4      	; 0x1060 <LCD_voidInit+0x51a>
    1064:	9a 8b       	std	Y+18, r25	; 0x12
    1066:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1068:	8b 89       	ldd	r24, Y+19	; 0x13
    106a:	9c 89       	ldd	r25, Y+20	; 0x14
    106c:	01 97       	sbiw	r24, 0x01	; 1
    106e:	9c 8b       	std	Y+20, r25	; 0x14
    1070:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1072:	8b 89       	ldd	r24, Y+19	; 0x13
    1074:	9c 89       	ldd	r25, Y+20	; 0x14
    1076:	00 97       	sbiw	r24, 0x00	; 0
    1078:	69 f7       	brne	.-38     	; 0x1054 <LCD_voidInit+0x50e>
    107a:	14 c0       	rjmp	.+40     	; 0x10a4 <LCD_voidInit+0x55e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    107c:	6d 89       	ldd	r22, Y+21	; 0x15
    107e:	7e 89       	ldd	r23, Y+22	; 0x16
    1080:	8f 89       	ldd	r24, Y+23	; 0x17
    1082:	98 8d       	ldd	r25, Y+24	; 0x18
    1084:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	9c 8b       	std	Y+20, r25	; 0x14
    108e:	8b 8b       	std	Y+19, r24	; 0x13
    1090:	8b 89       	ldd	r24, Y+19	; 0x13
    1092:	9c 89       	ldd	r25, Y+20	; 0x14
    1094:	98 8b       	std	Y+16, r25	; 0x10
    1096:	8f 87       	std	Y+15, r24	; 0x0f
    1098:	8f 85       	ldd	r24, Y+15	; 0x0f
    109a:	98 89       	ldd	r25, Y+16	; 0x10
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	f1 f7       	brne	.-4      	; 0x109c <LCD_voidInit+0x556>
    10a0:	98 8b       	std	Y+16, r25	; 0x10
    10a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);

	LCD_voidSendCommand(LCD_ENTRY_MODE);
    10a4:	86 e0       	ldi	r24, 0x06	; 6
    10a6:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	a0 e8       	ldi	r26, 0x80	; 128
    10b0:	bf e3       	ldi	r27, 0x3F	; 63
    10b2:	8b 87       	std	Y+11, r24	; 0x0b
    10b4:	9c 87       	std	Y+12, r25	; 0x0c
    10b6:	ad 87       	std	Y+13, r26	; 0x0d
    10b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    10bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    10be:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	4a e7       	ldi	r20, 0x7A	; 122
    10c8:	53 e4       	ldi	r21, 0x43	; 67
    10ca:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	8f 83       	std	Y+7, r24	; 0x07
    10d4:	98 87       	std	Y+8, r25	; 0x08
    10d6:	a9 87       	std	Y+9, r26	; 0x09
    10d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10da:	6f 81       	ldd	r22, Y+7	; 0x07
    10dc:	78 85       	ldd	r23, Y+8	; 0x08
    10de:	89 85       	ldd	r24, Y+9	; 0x09
    10e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	2c f4       	brge	.+10     	; 0x10fc <LCD_voidInit+0x5b6>
		__ticks = 1;
    10f2:	81 e0       	ldi	r24, 0x01	; 1
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	9e 83       	std	Y+6, r25	; 0x06
    10f8:	8d 83       	std	Y+5, r24	; 0x05
    10fa:	3f c0       	rjmp	.+126    	; 0x117a <LCD_voidInit+0x634>
	else if (__tmp > 65535)
    10fc:	6f 81       	ldd	r22, Y+7	; 0x07
    10fe:	78 85       	ldd	r23, Y+8	; 0x08
    1100:	89 85       	ldd	r24, Y+9	; 0x09
    1102:	9a 85       	ldd	r25, Y+10	; 0x0a
    1104:	20 e0       	ldi	r18, 0x00	; 0
    1106:	3f ef       	ldi	r19, 0xFF	; 255
    1108:	4f e7       	ldi	r20, 0x7F	; 127
    110a:	57 e4       	ldi	r21, 0x47	; 71
    110c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1110:	18 16       	cp	r1, r24
    1112:	4c f5       	brge	.+82     	; 0x1166 <LCD_voidInit+0x620>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1114:	6b 85       	ldd	r22, Y+11	; 0x0b
    1116:	7c 85       	ldd	r23, Y+12	; 0x0c
    1118:	8d 85       	ldd	r24, Y+13	; 0x0d
    111a:	9e 85       	ldd	r25, Y+14	; 0x0e
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
    1120:	40 e2       	ldi	r20, 0x20	; 32
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1134:	dc 01       	movw	r26, r24
    1136:	cb 01       	movw	r24, r22
    1138:	9e 83       	std	Y+6, r25	; 0x06
    113a:	8d 83       	std	Y+5, r24	; 0x05
    113c:	0f c0       	rjmp	.+30     	; 0x115c <LCD_voidInit+0x616>
    113e:	89 e1       	ldi	r24, 0x19	; 25
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 83       	std	Y+4, r25	; 0x04
    1144:	8b 83       	std	Y+3, r24	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	f1 f7       	brne	.-4      	; 0x114a <LCD_voidInit+0x604>
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1152:	8d 81       	ldd	r24, Y+5	; 0x05
    1154:	9e 81       	ldd	r25, Y+6	; 0x06
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9e 83       	std	Y+6, r25	; 0x06
    115a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    115c:	8d 81       	ldd	r24, Y+5	; 0x05
    115e:	9e 81       	ldd	r25, Y+6	; 0x06
    1160:	00 97       	sbiw	r24, 0x00	; 0
    1162:	69 f7       	brne	.-38     	; 0x113e <LCD_voidInit+0x5f8>
    1164:	14 c0       	rjmp	.+40     	; 0x118e <LCD_voidInit+0x648>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1166:	6f 81       	ldd	r22, Y+7	; 0x07
    1168:	78 85       	ldd	r23, Y+8	; 0x08
    116a:	89 85       	ldd	r24, Y+9	; 0x09
    116c:	9a 85       	ldd	r25, Y+10	; 0x0a
    116e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1172:	dc 01       	movw	r26, r24
    1174:	cb 01       	movw	r24, r22
    1176:	9e 83       	std	Y+6, r25	; 0x06
    1178:	8d 83       	std	Y+5, r24	; 0x05
    117a:	8d 81       	ldd	r24, Y+5	; 0x05
    117c:	9e 81       	ldd	r25, Y+6	; 0x06
    117e:	9a 83       	std	Y+2, r25	; 0x02
    1180:	89 83       	std	Y+1, r24	; 0x01
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	f1 f7       	brne	.-4      	; 0x1186 <LCD_voidInit+0x640>
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    118e:	cc 5a       	subi	r28, 0xAC	; 172
    1190:	df 4f       	sbci	r29, 0xFF	; 255
    1192:	0f b6       	in	r0, 0x3f	; 63
    1194:	f8 94       	cli
    1196:	de bf       	out	0x3e, r29	; 62
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	cd bf       	out	0x3d, r28	; 61
    119c:	cf 91       	pop	r28
    119e:	df 91       	pop	r29
    11a0:	1f 91       	pop	r17
    11a2:	0f 91       	pop	r16
    11a4:	08 95       	ret

000011a6 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	0f 92       	push	r0
    11ac:	cd b7       	in	r28, 0x3d	; 61
    11ae:	de b7       	in	r29, 0x3e	; 62
    11b0:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPortValue(LCD_DATA_PORT, command);
    11b2:	82 e0       	ldi	r24, 0x02	; 2
    11b4:	69 81       	ldd	r22, Y+1	; 0x01
    11b6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_LOW);
    11ba:	83 e0       	ldi	r24, 0x03	; 3
    11bc:	60 e0       	ldi	r22, 0x00	; 0
    11be:	40 e0       	ldi	r20, 0x00	; 0
    11c0:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	40 e0       	ldi	r20, 0x00	; 0
    11ca:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>

	//Send Pulse
	LCD_voidSendPulse();
    11ce:	0e 94 4b 09 	call	0x1296	; 0x1296 <LCD_voidSendPulse>
}
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <LCD_voidSendData>:

void LCD_voidSendData(u8 data)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	0f 92       	push	r0
    11e0:	cd b7       	in	r28, 0x3d	; 61
    11e2:	de b7       	in	r29, 0x3e	; 62
    11e4:	89 83       	std	Y+1, r24	; 0x01
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RS, DIO_PIN_HIGH);
    11e6:	83 e0       	ldi	r24, 0x03	; 3
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	41 e0       	ldi	r20, 0x01	; 1
    11ec:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_RW, DIO_PIN_LOW);
    11f0:	83 e0       	ldi	r24, 0x03	; 3
    11f2:	61 e0       	ldi	r22, 0x01	; 1
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	DIO_enumSetPortValue(LCD_DATA_PORT, data);
    11fa:	82 e0       	ldi	r24, 0x02	; 2
    11fc:	69 81       	ldd	r22, Y+1	; 0x01
    11fe:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>

	//Send Pulse
	LCD_voidSendPulse();
    1202:	0e 94 4b 09 	call	0x1296	; 0x1296 <LCD_voidSendPulse>
}
    1206:	0f 90       	pop	r0
    1208:	cf 91       	pop	r28
    120a:	df 91       	pop	r29
    120c:	08 95       	ret

0000120e <LCD_voidSetCursorPosition>:

void LCD_voidSetCursorPosition(u8 row, u8 col)
{
    120e:	df 93       	push	r29
    1210:	cf 93       	push	r28
    1212:	00 d0       	rcall	.+0      	; 0x1214 <LCD_voidSetCursorPosition+0x6>
    1214:	0f 92       	push	r0
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	8a 83       	std	Y+2, r24	; 0x02
    121c:	6b 83       	std	Y+3, r22	; 0x03
	u8 pos;
	if(row == 1)
    121e:	8a 81       	ldd	r24, Y+2	; 0x02
    1220:	81 30       	cpi	r24, 0x01	; 1
    1222:	21 f4       	brne	.+8      	; 0x122c <LCD_voidSetCursorPosition+0x1e>
		pos = LCD_CURSOR + (col - 1);
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	81 58       	subi	r24, 0x81	; 129
    1228:	89 83       	std	Y+1, r24	; 0x01
    122a:	03 c0       	rjmp	.+6      	; 0x1232 <LCD_voidSetCursorPosition+0x24>
	else
		pos = LCD_CURSOR + (col - 1) + 64;
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	81 54       	subi	r24, 0x41	; 65
    1230:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidSendCommand(pos);
    1232:	89 81       	ldd	r24, Y+1	; 0x01
    1234:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
}
    1238:	0f 90       	pop	r0
    123a:	0f 90       	pop	r0
    123c:	0f 90       	pop	r0
    123e:	cf 91       	pop	r28
    1240:	df 91       	pop	r29
    1242:	08 95       	ret

00001244 <LCD_voidSendString>:

void LCD_voidSendString(u8* str)
{
    1244:	df 93       	push	r29
    1246:	cf 93       	push	r28
    1248:	00 d0       	rcall	.+0      	; 0x124a <LCD_voidSendString+0x6>
    124a:	0f 92       	push	r0
    124c:	cd b7       	in	r28, 0x3d	; 61
    124e:	de b7       	in	r29, 0x3e	; 62
    1250:	9b 83       	std	Y+3, r25	; 0x03
    1252:	8a 83       	std	Y+2, r24	; 0x02
	u8 ptr = 0;
    1254:	19 82       	std	Y+1, r1	; 0x01
    1256:	0e c0       	rjmp	.+28     	; 0x1274 <LCD_voidSendString+0x30>
	while(str[ptr] != '\0')
	{
		LCD_voidSendData(str[ptr]);
    1258:	89 81       	ldd	r24, Y+1	; 0x01
    125a:	28 2f       	mov	r18, r24
    125c:	30 e0       	ldi	r19, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	9b 81       	ldd	r25, Y+3	; 0x03
    1262:	fc 01       	movw	r30, r24
    1264:	e2 0f       	add	r30, r18
    1266:	f3 1f       	adc	r31, r19
    1268:	80 81       	ld	r24, Z
    126a:	0e 94 ed 08 	call	0x11da	; 0x11da <LCD_voidSendData>
		ptr++;
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_voidSendString(u8* str)
{
	u8 ptr = 0;
	while(str[ptr] != '\0')
    1274:	89 81       	ldd	r24, Y+1	; 0x01
    1276:	28 2f       	mov	r18, r24
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	8a 81       	ldd	r24, Y+2	; 0x02
    127c:	9b 81       	ldd	r25, Y+3	; 0x03
    127e:	fc 01       	movw	r30, r24
    1280:	e2 0f       	add	r30, r18
    1282:	f3 1f       	adc	r31, r19
    1284:	80 81       	ld	r24, Z
    1286:	88 23       	and	r24, r24
    1288:	39 f7       	brne	.-50     	; 0x1258 <LCD_voidSendString+0x14>
	{
		LCD_voidSendData(str[ptr]);
		ptr++;
	}
}
    128a:	0f 90       	pop	r0
    128c:	0f 90       	pop	r0
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <LCD_voidSendPulse>:
static void LCD_voidSendPulse()
{
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62
    129e:	2e 97       	sbiw	r28, 0x0e	; 14
    12a0:	0f b6       	in	r0, 0x3f	; 63
    12a2:	f8 94       	cli
    12a4:	de bf       	out	0x3e, r29	; 62
    12a6:	0f be       	out	0x3f, r0	; 63
    12a8:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_HIGH);
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	62 e0       	ldi	r22, 0x02	; 2
    12ae:	41 e0       	ldi	r20, 0x01	; 1
    12b0:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	a0 e8       	ldi	r26, 0x80	; 128
    12ba:	bf e3       	ldi	r27, 0x3F	; 63
    12bc:	8b 87       	std	Y+11, r24	; 0x0b
    12be:	9c 87       	std	Y+12, r25	; 0x0c
    12c0:	ad 87       	std	Y+13, r26	; 0x0d
    12c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    12c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    12c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    12cc:	20 e0       	ldi	r18, 0x00	; 0
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	4a e7       	ldi	r20, 0x7A	; 122
    12d2:	53 e4       	ldi	r21, 0x43	; 67
    12d4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	8f 83       	std	Y+7, r24	; 0x07
    12de:	98 87       	std	Y+8, r25	; 0x08
    12e0:	a9 87       	std	Y+9, r26	; 0x09
    12e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12e4:	6f 81       	ldd	r22, Y+7	; 0x07
    12e6:	78 85       	ldd	r23, Y+8	; 0x08
    12e8:	89 85       	ldd	r24, Y+9	; 0x09
    12ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	40 e8       	ldi	r20, 0x80	; 128
    12f2:	5f e3       	ldi	r21, 0x3F	; 63
    12f4:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12f8:	88 23       	and	r24, r24
    12fa:	2c f4       	brge	.+10     	; 0x1306 <LCD_voidSendPulse+0x70>
		__ticks = 1;
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	9e 83       	std	Y+6, r25	; 0x06
    1302:	8d 83       	std	Y+5, r24	; 0x05
    1304:	3f c0       	rjmp	.+126    	; 0x1384 <LCD_voidSendPulse+0xee>
	else if (__tmp > 65535)
    1306:	6f 81       	ldd	r22, Y+7	; 0x07
    1308:	78 85       	ldd	r23, Y+8	; 0x08
    130a:	89 85       	ldd	r24, Y+9	; 0x09
    130c:	9a 85       	ldd	r25, Y+10	; 0x0a
    130e:	20 e0       	ldi	r18, 0x00	; 0
    1310:	3f ef       	ldi	r19, 0xFF	; 255
    1312:	4f e7       	ldi	r20, 0x7F	; 127
    1314:	57 e4       	ldi	r21, 0x47	; 71
    1316:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    131a:	18 16       	cp	r1, r24
    131c:	4c f5       	brge	.+82     	; 0x1370 <LCD_voidSendPulse+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    131e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1320:	7c 85       	ldd	r23, Y+12	; 0x0c
    1322:	8d 85       	ldd	r24, Y+13	; 0x0d
    1324:	9e 85       	ldd	r25, Y+14	; 0x0e
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	30 e0       	ldi	r19, 0x00	; 0
    132a:	40 e2       	ldi	r20, 0x20	; 32
    132c:	51 e4       	ldi	r21, 0x41	; 65
    132e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1332:	dc 01       	movw	r26, r24
    1334:	cb 01       	movw	r24, r22
    1336:	bc 01       	movw	r22, r24
    1338:	cd 01       	movw	r24, r26
    133a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    133e:	dc 01       	movw	r26, r24
    1340:	cb 01       	movw	r24, r22
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
    1346:	0f c0       	rjmp	.+30     	; 0x1366 <LCD_voidSendPulse+0xd0>
    1348:	89 e1       	ldi	r24, 0x19	; 25
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	01 97       	sbiw	r24, 0x01	; 1
    1356:	f1 f7       	brne	.-4      	; 0x1354 <LCD_voidSendPulse+0xbe>
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135c:	8d 81       	ldd	r24, Y+5	; 0x05
    135e:	9e 81       	ldd	r25, Y+6	; 0x06
    1360:	01 97       	sbiw	r24, 0x01	; 1
    1362:	9e 83       	std	Y+6, r25	; 0x06
    1364:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	00 97       	sbiw	r24, 0x00	; 0
    136c:	69 f7       	brne	.-38     	; 0x1348 <LCD_voidSendPulse+0xb2>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <LCD_voidSendPulse+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1370:	6f 81       	ldd	r22, Y+7	; 0x07
    1372:	78 85       	ldd	r23, Y+8	; 0x08
    1374:	89 85       	ldd	r24, Y+9	; 0x09
    1376:	9a 85       	ldd	r25, Y+10	; 0x0a
    1378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	9e 83       	std	Y+6, r25	; 0x06
    1382:	8d 83       	std	Y+5, r24	; 0x05
    1384:	8d 81       	ldd	r24, Y+5	; 0x05
    1386:	9e 81       	ldd	r25, Y+6	; 0x06
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	f1 f7       	brne	.-4      	; 0x1390 <LCD_voidSendPulse+0xfa>
    1394:	9a 83       	std	Y+2, r25	; 0x02
    1396:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	DIO_enumSetPinValue(LCD_CTRL_PORT, LCD_EN, DIO_PIN_LOW);
    1398:	83 e0       	ldi	r24, 0x03	; 3
    139a:	62 e0       	ldi	r22, 0x02	; 2
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>

}
    13a2:	2e 96       	adiw	r28, 0x0e	; 14
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <CLCD_voidClearScreen>:

void CLCD_voidClearScreen(void)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	2e 97       	sbiw	r28, 0x0e	; 14
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
	LCD_voidSendCommand(LCD_CLEAR);
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <LCD_voidSendCommand>
    13ce:	80 e0       	ldi	r24, 0x00	; 0
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	a0 e2       	ldi	r26, 0x20	; 32
    13d4:	b1 e4       	ldi	r27, 0x41	; 65
    13d6:	8b 87       	std	Y+11, r24	; 0x0b
    13d8:	9c 87       	std	Y+12, r25	; 0x0c
    13da:	ad 87       	std	Y+13, r26	; 0x0d
    13dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13de:	6b 85       	ldd	r22, Y+11	; 0x0b
    13e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    13e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    13e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	4a e7       	ldi	r20, 0x7A	; 122
    13ec:	53 e4       	ldi	r21, 0x43	; 67
    13ee:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	8f 83       	std	Y+7, r24	; 0x07
    13f8:	98 87       	std	Y+8, r25	; 0x08
    13fa:	a9 87       	std	Y+9, r26	; 0x09
    13fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13fe:	6f 81       	ldd	r22, Y+7	; 0x07
    1400:	78 85       	ldd	r23, Y+8	; 0x08
    1402:	89 85       	ldd	r24, Y+9	; 0x09
    1404:	9a 85       	ldd	r25, Y+10	; 0x0a
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1412:	88 23       	and	r24, r24
    1414:	2c f4       	brge	.+10     	; 0x1420 <CLCD_voidClearScreen+0x6c>
		__ticks = 1;
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	9e 83       	std	Y+6, r25	; 0x06
    141c:	8d 83       	std	Y+5, r24	; 0x05
    141e:	3f c0       	rjmp	.+126    	; 0x149e <CLCD_voidClearScreen+0xea>
	else if (__tmp > 65535)
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	3f ef       	ldi	r19, 0xFF	; 255
    142c:	4f e7       	ldi	r20, 0x7F	; 127
    142e:	57 e4       	ldi	r21, 0x47	; 71
    1430:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1434:	18 16       	cp	r1, r24
    1436:	4c f5       	brge	.+82     	; 0x148a <CLCD_voidClearScreen+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1438:	6b 85       	ldd	r22, Y+11	; 0x0b
    143a:	7c 85       	ldd	r23, Y+12	; 0x0c
    143c:	8d 85       	ldd	r24, Y+13	; 0x0d
    143e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1440:	20 e0       	ldi	r18, 0x00	; 0
    1442:	30 e0       	ldi	r19, 0x00	; 0
    1444:	40 e2       	ldi	r20, 0x20	; 32
    1446:	51 e4       	ldi	r21, 0x41	; 65
    1448:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	bc 01       	movw	r22, r24
    1452:	cd 01       	movw	r24, r26
    1454:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	9e 83       	std	Y+6, r25	; 0x06
    145e:	8d 83       	std	Y+5, r24	; 0x05
    1460:	0f c0       	rjmp	.+30     	; 0x1480 <CLCD_voidClearScreen+0xcc>
    1462:	89 e1       	ldi	r24, 0x19	; 25
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	9c 83       	std	Y+4, r25	; 0x04
    1468:	8b 83       	std	Y+3, r24	; 0x03
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	01 97       	sbiw	r24, 0x01	; 1
    1470:	f1 f7       	brne	.-4      	; 0x146e <CLCD_voidClearScreen+0xba>
    1472:	9c 83       	std	Y+4, r25	; 0x04
    1474:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	01 97       	sbiw	r24, 0x01	; 1
    147c:	9e 83       	std	Y+6, r25	; 0x06
    147e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	9e 81       	ldd	r25, Y+6	; 0x06
    1484:	00 97       	sbiw	r24, 0x00	; 0
    1486:	69 f7       	brne	.-38     	; 0x1462 <CLCD_voidClearScreen+0xae>
    1488:	14 c0       	rjmp	.+40     	; 0x14b2 <CLCD_voidClearScreen+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    148a:	6f 81       	ldd	r22, Y+7	; 0x07
    148c:	78 85       	ldd	r23, Y+8	; 0x08
    148e:	89 85       	ldd	r24, Y+9	; 0x09
    1490:	9a 85       	ldd	r25, Y+10	; 0x0a
    1492:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1496:	dc 01       	movw	r26, r24
    1498:	cb 01       	movw	r24, r22
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	8d 83       	std	Y+5, r24	; 0x05
    149e:	8d 81       	ldd	r24, Y+5	; 0x05
    14a0:	9e 81       	ldd	r25, Y+6	; 0x06
    14a2:	9a 83       	std	Y+2, r25	; 0x02
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	89 81       	ldd	r24, Y+1	; 0x01
    14a8:	9a 81       	ldd	r25, Y+2	; 0x02
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	f1 f7       	brne	.-4      	; 0x14aa <CLCD_voidClearScreen+0xf6>
    14ae:	9a 83       	std	Y+2, r25	; 0x02
    14b0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    14b2:	2e 96       	adiw	r28, 0x0e	; 14
    14b4:	0f b6       	in	r0, 0x3f	; 63
    14b6:	f8 94       	cli
    14b8:	de bf       	out	0x3e, r29	; 62
    14ba:	0f be       	out	0x3f, r0	; 63
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <SSD_voidInit>:
#include "SSD_config.h"

static u8 Local_u8SSDNums[10] = SSD_ArrNums;

void SSD_voidInit(SSD_Type SSD_Configuration)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <SSD_voidInit+0x6>
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <SSD_voidInit+0x8>
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	69 83       	std	Y+1, r22	; 0x01
    14d2:	7a 83       	std	Y+2, r23	; 0x02
    14d4:	8b 83       	std	Y+3, r24	; 0x03
    14d6:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPortDirection (SSD_Configuration.DataPort, DIO_PORT_OUTPUT);
    14d8:	8a 81       	ldd	r24, Y+2	; 0x02
    14da:	6f ef       	ldi	r22, 0xFF	; 255
    14dc:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_enumSetPortDirection>
}
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	0f 90       	pop	r0
    14e8:	cf 91       	pop	r28
    14ea:	df 91       	pop	r29
    14ec:	08 95       	ret

000014ee <SSD_voidSendNumber>:

void SSD_voidSendNumber(SSD_Type SSD_Configuration, u8 Copy_u8Number)
{
    14ee:	df 93       	push	r29
    14f0:	cf 93       	push	r28
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <SSD_voidSendNumber+0x6>
    14f4:	00 d0       	rcall	.+0      	; 0x14f6 <SSD_voidSendNumber+0x8>
    14f6:	0f 92       	push	r0
    14f8:	cd b7       	in	r28, 0x3d	; 61
    14fa:	de b7       	in	r29, 0x3e	; 62
    14fc:	69 83       	std	Y+1, r22	; 0x01
    14fe:	7a 83       	std	Y+2, r23	; 0x02
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	9c 83       	std	Y+4, r25	; 0x04
    1504:	4d 83       	std	Y+5, r20	; 0x05
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1506:	89 81       	ldd	r24, Y+1	; 0x01
    1508:	88 23       	and	r24, r24
    150a:	69 f4       	brne	.+26     	; 0x1526 <SSD_voidSendNumber+0x38>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, Local_u8SSDNums[Copy_u8Number] );
    150c:	2a 81       	ldd	r18, Y+2	; 0x02
    150e:	8d 81       	ldd	r24, Y+5	; 0x05
    1510:	88 2f       	mov	r24, r24
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	fc 01       	movw	r30, r24
    1516:	e8 59       	subi	r30, 0x98	; 152
    1518:	ff 4f       	sbci	r31, 0xFF	; 255
    151a:	90 81       	ld	r25, Z
    151c:	82 2f       	mov	r24, r18
    151e:	69 2f       	mov	r22, r25
    1520:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>
    1524:	11 c0       	rjmp	.+34     	; 0x1548 <SSD_voidSendNumber+0x5a>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	71 f4       	brne	.+28     	; 0x1548 <SSD_voidSendNumber+0x5a>
	{
		DIO_enumSetPortValue(SSD_Configuration.DataPort, ~Local_u8SSDNums[Copy_u8Number]);
    152c:	2a 81       	ldd	r18, Y+2	; 0x02
    152e:	8d 81       	ldd	r24, Y+5	; 0x05
    1530:	88 2f       	mov	r24, r24
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	fc 01       	movw	r30, r24
    1536:	e8 59       	subi	r30, 0x98	; 152
    1538:	ff 4f       	sbci	r31, 0xFF	; 255
    153a:	80 81       	ld	r24, Z
    153c:	98 2f       	mov	r25, r24
    153e:	90 95       	com	r25
    1540:	82 2f       	mov	r24, r18
    1542:	69 2f       	mov	r22, r25
    1544:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>
	}
}
    1548:	0f 90       	pop	r0
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	0f 90       	pop	r0
    1552:	cf 91       	pop	r28
    1554:	df 91       	pop	r29
    1556:	08 95       	ret

00001558 <SSD_voidEnable>:

void SSD_voidEnable(SSD_Type SSD_Configuration)
{
    1558:	df 93       	push	r29
    155a:	cf 93       	push	r28
    155c:	00 d0       	rcall	.+0      	; 0x155e <SSD_voidEnable+0x6>
    155e:	00 d0       	rcall	.+0      	; 0x1560 <SSD_voidEnable+0x8>
    1560:	cd b7       	in	r28, 0x3d	; 61
    1562:	de b7       	in	r29, 0x3e	; 62
    1564:	69 83       	std	Y+1, r22	; 0x01
    1566:	7a 83       	std	Y+2, r23	; 0x02
    1568:	8b 83       	std	Y+3, r24	; 0x03
    156a:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    156c:	8a 81       	ldd	r24, Y+2	; 0x02
    156e:	9c 81       	ldd	r25, Y+4	; 0x04
    1570:	69 2f       	mov	r22, r25
    1572:	41 e0       	ldi	r20, 0x01	; 1
    1574:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	88 23       	and	r24, r24
    157c:	39 f4       	brne	.+14     	; 0x158c <SSD_voidEnable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    157e:	8a 81       	ldd	r24, Y+2	; 0x02
    1580:	9c 81       	ldd	r25, Y+4	; 0x04
    1582:	69 2f       	mov	r22, r25
    1584:	40 e0       	ldi	r20, 0x00	; 0
    1586:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
    158a:	09 c0       	rjmp	.+18     	; 0x159e <SSD_voidEnable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    158c:	89 81       	ldd	r24, Y+1	; 0x01
    158e:	81 30       	cpi	r24, 0x01	; 1
    1590:	31 f4       	brne	.+12     	; 0x159e <SSD_voidEnable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    1592:	8a 81       	ldd	r24, Y+2	; 0x02
    1594:	9c 81       	ldd	r25, Y+4	; 0x04
    1596:	69 2f       	mov	r22, r25
    1598:	41 e0       	ldi	r20, 0x01	; 1
    159a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	}
}
    159e:	0f 90       	pop	r0
    15a0:	0f 90       	pop	r0
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	cf 91       	pop	r28
    15a8:	df 91       	pop	r29
    15aa:	08 95       	ret

000015ac <SSD_voidDisable>:

void SSD_voidDisable(SSD_Type SSD_Configuration)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <SSD_voidDisable+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <SSD_voidDisable+0x8>
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	69 83       	std	Y+1, r22	; 0x01
    15ba:	7a 83       	std	Y+2, r23	; 0x02
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	9c 83       	std	Y+4, r25	; 0x04
	DIO_enumSetPinDirection(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_OUTPUT);
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	69 2f       	mov	r22, r25
    15c6:	41 e0       	ldi	r20, 0x01	; 1
    15c8:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_enumSetPinDirection>
	if(SSD_Configuration.Type == SSD_COMM_CAT)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	88 23       	and	r24, r24
    15d0:	39 f4       	brne	.+14     	; 0x15e0 <SSD_voidDisable+0x34>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_HIGH);
    15d2:	8a 81       	ldd	r24, Y+2	; 0x02
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	69 2f       	mov	r22, r25
    15d8:	41 e0       	ldi	r20, 0x01	; 1
    15da:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
    15de:	09 c0       	rjmp	.+18     	; 0x15f2 <SSD_voidDisable+0x46>
	}
	else if(SSD_Configuration.Type == SSD_COMM_AND)
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	81 30       	cpi	r24, 0x01	; 1
    15e4:	31 f4       	brne	.+12     	; 0x15f2 <SSD_voidDisable+0x46>
	{
		DIO_enumSetPinValue(SSD_Configuration.DataPort, SSD_Configuration.EnPin, DIO_PIN_LOW);
    15e6:	8a 81       	ldd	r24, Y+2	; 0x02
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	69 2f       	mov	r22, r25
    15ec:	40 e0       	ldi	r20, 0x00	; 0
    15ee:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	}
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <SSD_voidCounter>:

void SSD_voidCounter()
{
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
    1608:	a1 97       	sbiw	r28, 0x21	; 33
    160a:	0f b6       	in	r0, 0x3f	; 63
    160c:	f8 94       	cli
    160e:	de bf       	out	0x3e, r29	; 62
    1610:	0f be       	out	0x3f, r0	; 63
    1612:	cd bf       	out	0x3d, r28	; 61
	DIO_enumSetPortDirection(SSD_PORTB, DIO_PIN_OUTPUT);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	61 e0       	ldi	r22, 0x01	; 1
    1618:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_enumSetPortDirection>
	u8 digit1, digit2, counter = 0; u8 delay = 25;
    161c:	1e 8e       	std	Y+30, r1	; 0x1e
    161e:	89 e1       	ldi	r24, 0x19	; 25
    1620:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_enumSetPinDirection(SSD_PORTD, SSD_PIN7, DIO_PIN_OUTPUT);
    1622:	83 e0       	ldi	r24, 0x03	; 3
    1624:	67 e0       	ldi	r22, 0x07	; 7
    1626:	41 e0       	ldi	r20, 0x01	; 1
    1628:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_enumSetPinDirection>
	DIO_enumSetPinDirection(SSD_PORTD, SSD_PIN6, DIO_PIN_OUTPUT);
    162c:	83 e0       	ldi	r24, 0x03	; 3
    162e:	66 e0       	ldi	r22, 0x06	; 6
    1630:	41 e0       	ldi	r20, 0x01	; 1
    1632:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_enumSetPinDirection>

	for(counter = 0; counter <= 30; counter++)
    1636:	1e 8e       	std	Y+30, r1	; 0x1e
    1638:	21 c1       	rjmp	.+578    	; 0x187c <SSD_voidCounter+0x27c>
	{
	    delay = 25;
    163a:	89 e1       	ldi	r24, 0x19	; 25
    163c:	8d 8f       	std	Y+29, r24	; 0x1d
	    digit1 = counter % 10;
    163e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1640:	9a e0       	ldi	r25, 0x0A	; 10
    1642:	69 2f       	mov	r22, r25
    1644:	0e 94 27 13 	call	0x264e	; 0x264e <__udivmodqi4>
    1648:	89 2f       	mov	r24, r25
    164a:	88 a3       	std	Y+32, r24	; 0x20
	    digit2 = counter / 10;
    164c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    164e:	9a e0       	ldi	r25, 0x0A	; 10
    1650:	69 2f       	mov	r22, r25
    1652:	0e 94 27 13 	call	0x264e	; 0x264e <__udivmodqi4>
    1656:	8f 8f       	std	Y+31, r24	; 0x1f
    1658:	00 c1       	rjmp	.+512    	; 0x185a <SSD_voidCounter+0x25a>

	    while(delay-- > 0)
	    {
	        DIO_enumSetPinValue(SSD_PORTD, SSD_PIN7, DIO_PIN_HIGH);
    165a:	83 e0       	ldi	r24, 0x03	; 3
    165c:	67 e0       	ldi	r22, 0x07	; 7
    165e:	41 e0       	ldi	r20, 0x01	; 1
    1660:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	        DIO_enumSetPinValue(SSD_PORTD, SSD_PIN6, DIO_PIN_LOW);
    1664:	83 e0       	ldi	r24, 0x03	; 3
    1666:	66 e0       	ldi	r22, 0x06	; 6
    1668:	40 e0       	ldi	r20, 0x00	; 0
    166a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	        DIO_enumSetPortValue(SSD_PORTB, digit1);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	68 a1       	ldd	r22, Y+32	; 0x20
    1672:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	a0 ea       	ldi	r26, 0xA0	; 160
    167c:	b0 e4       	ldi	r27, 0x40	; 64
    167e:	89 8f       	std	Y+25, r24	; 0x19
    1680:	9a 8f       	std	Y+26, r25	; 0x1a
    1682:	ab 8f       	std	Y+27, r26	; 0x1b
    1684:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1686:	69 8d       	ldd	r22, Y+25	; 0x19
    1688:	7a 8d       	ldd	r23, Y+26	; 0x1a
    168a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    168c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	4a e7       	ldi	r20, 0x7A	; 122
    1694:	53 e4       	ldi	r21, 0x43	; 67
    1696:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	8d 8b       	std	Y+21, r24	; 0x15
    16a0:	9e 8b       	std	Y+22, r25	; 0x16
    16a2:	af 8b       	std	Y+23, r26	; 0x17
    16a4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    16a6:	6d 89       	ldd	r22, Y+21	; 0x15
    16a8:	7e 89       	ldd	r23, Y+22	; 0x16
    16aa:	8f 89       	ldd	r24, Y+23	; 0x17
    16ac:	98 8d       	ldd	r25, Y+24	; 0x18
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	40 e8       	ldi	r20, 0x80	; 128
    16b4:	5f e3       	ldi	r21, 0x3F	; 63
    16b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    16ba:	88 23       	and	r24, r24
    16bc:	2c f4       	brge	.+10     	; 0x16c8 <SSD_voidCounter+0xc8>
		__ticks = 1;
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9c 8b       	std	Y+20, r25	; 0x14
    16c4:	8b 8b       	std	Y+19, r24	; 0x13
    16c6:	3f c0       	rjmp	.+126    	; 0x1746 <SSD_voidCounter+0x146>
	else if (__tmp > 65535)
    16c8:	6d 89       	ldd	r22, Y+21	; 0x15
    16ca:	7e 89       	ldd	r23, Y+22	; 0x16
    16cc:	8f 89       	ldd	r24, Y+23	; 0x17
    16ce:	98 8d       	ldd	r25, Y+24	; 0x18
    16d0:	20 e0       	ldi	r18, 0x00	; 0
    16d2:	3f ef       	ldi	r19, 0xFF	; 255
    16d4:	4f e7       	ldi	r20, 0x7F	; 127
    16d6:	57 e4       	ldi	r21, 0x47	; 71
    16d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    16dc:	18 16       	cp	r1, r24
    16de:	4c f5       	brge	.+82     	; 0x1732 <SSD_voidCounter+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16e0:	69 8d       	ldd	r22, Y+25	; 0x19
    16e2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	40 e2       	ldi	r20, 0x20	; 32
    16ee:	51 e4       	ldi	r21, 0x41	; 65
    16f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    16f4:	dc 01       	movw	r26, r24
    16f6:	cb 01       	movw	r24, r22
    16f8:	bc 01       	movw	r22, r24
    16fa:	cd 01       	movw	r24, r26
    16fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	9c 8b       	std	Y+20, r25	; 0x14
    1706:	8b 8b       	std	Y+19, r24	; 0x13
    1708:	0f c0       	rjmp	.+30     	; 0x1728 <SSD_voidCounter+0x128>
    170a:	89 e1       	ldi	r24, 0x19	; 25
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	9a 8b       	std	Y+18, r25	; 0x12
    1710:	89 8b       	std	Y+17, r24	; 0x11
    1712:	89 89       	ldd	r24, Y+17	; 0x11
    1714:	9a 89       	ldd	r25, Y+18	; 0x12
    1716:	01 97       	sbiw	r24, 0x01	; 1
    1718:	f1 f7       	brne	.-4      	; 0x1716 <SSD_voidCounter+0x116>
    171a:	9a 8b       	std	Y+18, r25	; 0x12
    171c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    171e:	8b 89       	ldd	r24, Y+19	; 0x13
    1720:	9c 89       	ldd	r25, Y+20	; 0x14
    1722:	01 97       	sbiw	r24, 0x01	; 1
    1724:	9c 8b       	std	Y+20, r25	; 0x14
    1726:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1728:	8b 89       	ldd	r24, Y+19	; 0x13
    172a:	9c 89       	ldd	r25, Y+20	; 0x14
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	69 f7       	brne	.-38     	; 0x170a <SSD_voidCounter+0x10a>
    1730:	14 c0       	rjmp	.+40     	; 0x175a <SSD_voidCounter+0x15a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1732:	6d 89       	ldd	r22, Y+21	; 0x15
    1734:	7e 89       	ldd	r23, Y+22	; 0x16
    1736:	8f 89       	ldd	r24, Y+23	; 0x17
    1738:	98 8d       	ldd	r25, Y+24	; 0x18
    173a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    173e:	dc 01       	movw	r26, r24
    1740:	cb 01       	movw	r24, r22
    1742:	9c 8b       	std	Y+20, r25	; 0x14
    1744:	8b 8b       	std	Y+19, r24	; 0x13
    1746:	8b 89       	ldd	r24, Y+19	; 0x13
    1748:	9c 89       	ldd	r25, Y+20	; 0x14
    174a:	98 8b       	std	Y+16, r25	; 0x10
    174c:	8f 87       	std	Y+15, r24	; 0x0f
    174e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1750:	98 89       	ldd	r25, Y+16	; 0x10
    1752:	01 97       	sbiw	r24, 0x01	; 1
    1754:	f1 f7       	brne	.-4      	; 0x1752 <SSD_voidCounter+0x152>
    1756:	98 8b       	std	Y+16, r25	; 0x10
    1758:	8f 87       	std	Y+15, r24	; 0x0f
	        _delay_ms(5);

	        DIO_enumSetPinValue(SSD_PORTD, SSD_PIN6, DIO_PIN_HIGH);
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	66 e0       	ldi	r22, 0x06	; 6
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	        DIO_enumSetPinValue(SSD_PORTD, SSD_PIN7, DIO_PIN_LOW);
    1764:	83 e0       	ldi	r24, 0x03	; 3
    1766:	67 e0       	ldi	r22, 0x07	; 7
    1768:	40 e0       	ldi	r20, 0x00	; 0
    176a:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	        DIO_enumSetPortValue(SSD_PORTB, digit2);
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1772:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>
    1776:	80 e0       	ldi	r24, 0x00	; 0
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	a0 ea       	ldi	r26, 0xA0	; 160
    177c:	b0 e4       	ldi	r27, 0x40	; 64
    177e:	8b 87       	std	Y+11, r24	; 0x0b
    1780:	9c 87       	std	Y+12, r25	; 0x0c
    1782:	ad 87       	std	Y+13, r26	; 0x0d
    1784:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1786:	6b 85       	ldd	r22, Y+11	; 0x0b
    1788:	7c 85       	ldd	r23, Y+12	; 0x0c
    178a:	8d 85       	ldd	r24, Y+13	; 0x0d
    178c:	9e 85       	ldd	r25, Y+14	; 0x0e
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	4a e7       	ldi	r20, 0x7A	; 122
    1794:	53 e4       	ldi	r21, 0x43	; 67
    1796:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    179a:	dc 01       	movw	r26, r24
    179c:	cb 01       	movw	r24, r22
    179e:	8f 83       	std	Y+7, r24	; 0x07
    17a0:	98 87       	std	Y+8, r25	; 0x08
    17a2:	a9 87       	std	Y+9, r26	; 0x09
    17a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    17a6:	6f 81       	ldd	r22, Y+7	; 0x07
    17a8:	78 85       	ldd	r23, Y+8	; 0x08
    17aa:	89 85       	ldd	r24, Y+9	; 0x09
    17ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	40 e8       	ldi	r20, 0x80	; 128
    17b4:	5f e3       	ldi	r21, 0x3F	; 63
    17b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    17ba:	88 23       	and	r24, r24
    17bc:	2c f4       	brge	.+10     	; 0x17c8 <SSD_voidCounter+0x1c8>
		__ticks = 1;
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	9e 83       	std	Y+6, r25	; 0x06
    17c4:	8d 83       	std	Y+5, r24	; 0x05
    17c6:	3f c0       	rjmp	.+126    	; 0x1846 <SSD_voidCounter+0x246>
	else if (__tmp > 65535)
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	20 e0       	ldi	r18, 0x00	; 0
    17d2:	3f ef       	ldi	r19, 0xFF	; 255
    17d4:	4f e7       	ldi	r20, 0x7F	; 127
    17d6:	57 e4       	ldi	r21, 0x47	; 71
    17d8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    17dc:	18 16       	cp	r1, r24
    17de:	4c f5       	brge	.+82     	; 0x1832 <SSD_voidCounter+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    17f4:	dc 01       	movw	r26, r24
    17f6:	cb 01       	movw	r24, r22
    17f8:	bc 01       	movw	r22, r24
    17fa:	cd 01       	movw	r24, r26
    17fc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1800:	dc 01       	movw	r26, r24
    1802:	cb 01       	movw	r24, r22
    1804:	9e 83       	std	Y+6, r25	; 0x06
    1806:	8d 83       	std	Y+5, r24	; 0x05
    1808:	0f c0       	rjmp	.+30     	; 0x1828 <SSD_voidCounter+0x228>
    180a:	89 e1       	ldi	r24, 0x19	; 25
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	9c 83       	std	Y+4, r25	; 0x04
    1810:	8b 83       	std	Y+3, r24	; 0x03
    1812:	8b 81       	ldd	r24, Y+3	; 0x03
    1814:	9c 81       	ldd	r25, Y+4	; 0x04
    1816:	01 97       	sbiw	r24, 0x01	; 1
    1818:	f1 f7       	brne	.-4      	; 0x1816 <SSD_voidCounter+0x216>
    181a:	9c 83       	std	Y+4, r25	; 0x04
    181c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181e:	8d 81       	ldd	r24, Y+5	; 0x05
    1820:	9e 81       	ldd	r25, Y+6	; 0x06
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	9e 83       	std	Y+6, r25	; 0x06
    1826:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1828:	8d 81       	ldd	r24, Y+5	; 0x05
    182a:	9e 81       	ldd	r25, Y+6	; 0x06
    182c:	00 97       	sbiw	r24, 0x00	; 0
    182e:	69 f7       	brne	.-38     	; 0x180a <SSD_voidCounter+0x20a>
    1830:	14 c0       	rjmp	.+40     	; 0x185a <SSD_voidCounter+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    183e:	dc 01       	movw	r26, r24
    1840:	cb 01       	movw	r24, r22
    1842:	9e 83       	std	Y+6, r25	; 0x06
    1844:	8d 83       	std	Y+5, r24	; 0x05
    1846:	8d 81       	ldd	r24, Y+5	; 0x05
    1848:	9e 81       	ldd	r25, Y+6	; 0x06
    184a:	9a 83       	std	Y+2, r25	; 0x02
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	9a 81       	ldd	r25, Y+2	; 0x02
    1852:	01 97       	sbiw	r24, 0x01	; 1
    1854:	f1 f7       	brne	.-4      	; 0x1852 <SSD_voidCounter+0x252>
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01
	{
	    delay = 25;
	    digit1 = counter % 10;
	    digit2 = counter / 10;

	    while(delay-- > 0)
    185a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    185c:	89 a3       	std	Y+33, r24	; 0x21
    185e:	89 a1       	ldd	r24, Y+33	; 0x21
    1860:	88 23       	and	r24, r24
    1862:	11 f0       	breq	.+4      	; 0x1868 <SSD_voidCounter+0x268>
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	89 a3       	std	Y+33, r24	; 0x21
    1868:	89 a1       	ldd	r24, Y+33	; 0x21
    186a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    186c:	91 50       	subi	r25, 0x01	; 1
    186e:	9d 8f       	std	Y+29, r25	; 0x1d
    1870:	88 23       	and	r24, r24
    1872:	09 f0       	breq	.+2      	; 0x1876 <SSD_voidCounter+0x276>
    1874:	f2 ce       	rjmp	.-540    	; 0x165a <SSD_voidCounter+0x5a>
	DIO_enumSetPortDirection(SSD_PORTB, DIO_PIN_OUTPUT);
	u8 digit1, digit2, counter = 0; u8 delay = 25;
	DIO_enumSetPinDirection(SSD_PORTD, SSD_PIN7, DIO_PIN_OUTPUT);
	DIO_enumSetPinDirection(SSD_PORTD, SSD_PIN6, DIO_PIN_OUTPUT);

	for(counter = 0; counter <= 30; counter++)
    1876:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1878:	8f 5f       	subi	r24, 0xFF	; 255
    187a:	8e 8f       	std	Y+30, r24	; 0x1e
    187c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    187e:	8f 31       	cpi	r24, 0x1F	; 31
    1880:	08 f4       	brcc	.+2      	; 0x1884 <SSD_voidCounter+0x284>
    1882:	db ce       	rjmp	.-586    	; 0x163a <SSD_voidCounter+0x3a>
	        DIO_enumSetPortValue(SSD_PORTB, digit2);
	        _delay_ms(5);
	    }
	}

}
    1884:	a1 96       	adiw	r28, 0x21	; 33
    1886:	0f b6       	in	r0, 0x3f	; 63
    1888:	f8 94       	cli
    188a:	de bf       	out	0x3e, r29	; 62
    188c:	0f be       	out	0x3f, r0	; 63
    188e:	cd bf       	out	0x3d, r28	; 61
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <LED_voidInit>:
#include <util/delay.h>



void LED_voidInit(LED_Type LED_Configuration)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <LED_voidInit+0x6>
    189c:	0f 92       	push	r0
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	69 83       	std	Y+1, r22	; 0x01
    18a4:	7a 83       	std	Y+2, r23	; 0x02
    18a6:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumSetPinDirection(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_OUTPUT);
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	69 2f       	mov	r22, r25
    18ae:	41 e0       	ldi	r20, 0x01	; 1
    18b0:	0e 94 4d 0d 	call	0x1a9a	; 0x1a9a <DIO_enumSetPinDirection>
}
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	cf 91       	pop	r28
    18bc:	df 91       	pop	r29
    18be:	08 95       	ret

000018c0 <LED_voidON>:

void LED_voidON(LED_Type LED_Configuration)
{
    18c0:	df 93       	push	r29
    18c2:	cf 93       	push	r28
    18c4:	00 d0       	rcall	.+0      	; 0x18c6 <LED_voidON+0x6>
    18c6:	0f 92       	push	r0
    18c8:	cd b7       	in	r28, 0x3d	; 61
    18ca:	de b7       	in	r29, 0x3e	; 62
    18cc:	69 83       	std	Y+1, r22	; 0x01
    18ce:	7a 83       	std	Y+2, r23	; 0x02
    18d0:	8b 83       	std	Y+3, r24	; 0x03
	if(LED_Configuration.Active_State == ACTIVE_HIGH)
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	81 30       	cpi	r24, 0x01	; 1
    18d6:	39 f4       	brne	.+14     	; 0x18e6 <LED_voidON+0x26>
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_HIGH);
    18d8:	89 81       	ldd	r24, Y+1	; 0x01
    18da:	9a 81       	ldd	r25, Y+2	; 0x02
    18dc:	69 2f       	mov	r22, r25
    18de:	41 e0       	ldi	r20, 0x01	; 1
    18e0:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
    18e4:	06 c0       	rjmp	.+12     	; 0x18f2 <LED_voidON+0x32>
	}
	
	else
	{
		DIO_enumSetPinValue(LED_Configuration.port, LED_Configuration.pin, DIO_PIN_LOW);
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	69 2f       	mov	r22, r25
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
	}
}
    18f2:	0f 90       	pop	r0
    18f4:	0f 90       	pop	r0
    18f6:	0f 90       	pop	r0
    18f8:	cf 91       	pop	r28
    18fa:	df 91       	pop	r29
    18fc:	08 95       	ret

000018fe <LED_voidOff>:

void LED_voidOff ( LED_Type LED_Configuration )
{
    18fe:	df 93       	push	r29
    1900:	cf 93       	push	r28
    1902:	00 d0       	rcall	.+0      	; 0x1904 <LED_voidOff+0x6>
    1904:	0f 92       	push	r0
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	69 83       	std	Y+1, r22	; 0x01
    190c:	7a 83       	std	Y+2, r23	; 0x02
    190e:	8b 83       	std	Y+3, r24	; 0x03

	if( LED_Configuration.Active_State == ACTIVE_HIGH ){
    1910:	8b 81       	ldd	r24, Y+3	; 0x03
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	39 f4       	brne	.+14     	; 0x1924 <LED_voidOff+0x26>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_LOW  );
    1916:	89 81       	ldd	r24, Y+1	; 0x01
    1918:	9a 81       	ldd	r25, Y+2	; 0x02
    191a:	69 2f       	mov	r22, r25
    191c:	40 e0       	ldi	r20, 0x00	; 0
    191e:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>
    1922:	09 c0       	rjmp	.+18     	; 0x1936 <LED_voidOff+0x38>

	}else if( LED_Configuration.Active_State == ACTIVE_LOW ){
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 23       	and	r24, r24
    1928:	31 f4       	brne	.+12     	; 0x1936 <LED_voidOff+0x38>

		DIO_enumSetPinValue( LED_Configuration.port , LED_Configuration.pin , DIO_PIN_HIGH  );
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	69 2f       	mov	r22, r25
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <DIO_enumSetPinValue>

	}

}
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	0f 90       	pop	r0
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <LED_voidToggle>:


void LED_voidToggle(LED_Type LED_Configuration)
{
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <LED_voidToggle+0x6>
    1948:	0f 92       	push	r0
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	69 83       	std	Y+1, r22	; 0x01
    1950:	7a 83       	std	Y+2, r23	; 0x02
    1952:	8b 83       	std	Y+3, r24	; 0x03
	DIO_enumTogglePinValue(LED_Configuration.port, LED_Configuration.pin);
    1954:	89 81       	ldd	r24, Y+1	; 0x01
    1956:	9a 81       	ldd	r25, Y+2	; 0x02
    1958:	69 2f       	mov	r22, r25
    195a:	0e 94 30 10 	call	0x2060	; 0x2060 <DIO_enumTogglePinValue>
}
    195e:	0f 90       	pop	r0
    1960:	0f 90       	pop	r0
    1962:	0f 90       	pop	r0
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <LED_voidBinaryCounter>:

void LED_voidBinaryCounter(u8 Copy_u8PORT)
{
    196a:	df 93       	push	r29
    196c:	cf 93       	push	r28
    196e:	cd b7       	in	r28, 0x3d	; 61
    1970:	de b7       	in	r29, 0x3e	; 62
    1972:	60 97       	sbiw	r28, 0x10	; 16
    1974:	0f b6       	in	r0, 0x3f	; 63
    1976:	f8 94       	cli
    1978:	de bf       	out	0x3e, r29	; 62
    197a:	0f be       	out	0x3f, r0	; 63
    197c:	cd bf       	out	0x3d, r28	; 61
    197e:	88 8b       	std	Y+16, r24	; 0x10
	DIO_enumSetPortDirection( Copy_u8PORT , DIO_PORT_OUTPUT );
    1980:	88 89       	ldd	r24, Y+16	; 0x10
    1982:	6f ef       	ldi	r22, 0xFF	; 255
    1984:	0e 94 8d 12 	call	0x251a	; 0x251a <DIO_enumSetPortDirection>
	u8 i = 0;
    1988:	1f 86       	std	Y+15, r1	; 0x0f
	for(i = 0; i < 255; i++)
    198a:	1f 86       	std	Y+15, r1	; 0x0f
    198c:	79 c0       	rjmp	.+242    	; 0x1a80 <LED_voidBinaryCounter+0x116>
	{
		DIO_enumSetPortValue(Copy_u8PORT, i);
    198e:	88 89       	ldd	r24, Y+16	; 0x10
    1990:	6f 85       	ldd	r22, Y+15	; 0x0f
    1992:	0e 94 da 12 	call	0x25b4	; 0x25b4 <DIO_enumSetPortValue>
    1996:	80 e0       	ldi	r24, 0x00	; 0
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	aa e7       	ldi	r26, 0x7A	; 122
    199c:	b4 e4       	ldi	r27, 0x44	; 68
    199e:	8b 87       	std	Y+11, r24	; 0x0b
    19a0:	9c 87       	std	Y+12, r25	; 0x0c
    19a2:	ad 87       	std	Y+13, r26	; 0x0d
    19a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    19aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    19ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    19ae:	20 e0       	ldi	r18, 0x00	; 0
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	4a e7       	ldi	r20, 0x7A	; 122
    19b4:	53 e4       	ldi	r21, 0x43	; 67
    19b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    19ba:	dc 01       	movw	r26, r24
    19bc:	cb 01       	movw	r24, r22
    19be:	8f 83       	std	Y+7, r24	; 0x07
    19c0:	98 87       	std	Y+8, r25	; 0x08
    19c2:	a9 87       	std	Y+9, r26	; 0x09
    19c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    19c6:	6f 81       	ldd	r22, Y+7	; 0x07
    19c8:	78 85       	ldd	r23, Y+8	; 0x08
    19ca:	89 85       	ldd	r24, Y+9	; 0x09
    19cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	30 e0       	ldi	r19, 0x00	; 0
    19d2:	40 e8       	ldi	r20, 0x80	; 128
    19d4:	5f e3       	ldi	r21, 0x3F	; 63
    19d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    19da:	88 23       	and	r24, r24
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <LED_voidBinaryCounter+0x7e>
		__ticks = 1;
    19de:	81 e0       	ldi	r24, 0x01	; 1
    19e0:	90 e0       	ldi	r25, 0x00	; 0
    19e2:	9e 83       	std	Y+6, r25	; 0x06
    19e4:	8d 83       	std	Y+5, r24	; 0x05
    19e6:	3f c0       	rjmp	.+126    	; 0x1a66 <LED_voidBinaryCounter+0xfc>
	else if (__tmp > 65535)
    19e8:	6f 81       	ldd	r22, Y+7	; 0x07
    19ea:	78 85       	ldd	r23, Y+8	; 0x08
    19ec:	89 85       	ldd	r24, Y+9	; 0x09
    19ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	3f ef       	ldi	r19, 0xFF	; 255
    19f4:	4f e7       	ldi	r20, 0x7F	; 127
    19f6:	57 e4       	ldi	r21, 0x47	; 71
    19f8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    19fc:	18 16       	cp	r1, r24
    19fe:	4c f5       	brge	.+82     	; 0x1a52 <LED_voidBinaryCounter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a08:	20 e0       	ldi	r18, 0x00	; 0
    1a0a:	30 e0       	ldi	r19, 0x00	; 0
    1a0c:	40 e2       	ldi	r20, 0x20	; 32
    1a0e:	51 e4       	ldi	r21, 0x41	; 65
    1a10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1a14:	dc 01       	movw	r26, r24
    1a16:	cb 01       	movw	r24, r22
    1a18:	bc 01       	movw	r22, r24
    1a1a:	cd 01       	movw	r24, r26
    1a1c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	9e 83       	std	Y+6, r25	; 0x06
    1a26:	8d 83       	std	Y+5, r24	; 0x05
    1a28:	0f c0       	rjmp	.+30     	; 0x1a48 <LED_voidBinaryCounter+0xde>
    1a2a:	89 e1       	ldi	r24, 0x19	; 25
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	9c 83       	std	Y+4, r25	; 0x04
    1a30:	8b 83       	std	Y+3, r24	; 0x03
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	9c 81       	ldd	r25, Y+4	; 0x04
    1a36:	01 97       	sbiw	r24, 0x01	; 1
    1a38:	f1 f7       	brne	.-4      	; 0x1a36 <LED_voidBinaryCounter+0xcc>
    1a3a:	9c 83       	std	Y+4, r25	; 0x04
    1a3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a40:	9e 81       	ldd	r25, Y+6	; 0x06
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	9e 83       	std	Y+6, r25	; 0x06
    1a46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a48:	8d 81       	ldd	r24, Y+5	; 0x05
    1a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	69 f7       	brne	.-38     	; 0x1a2a <LED_voidBinaryCounter+0xc0>
    1a50:	14 c0       	rjmp	.+40     	; 0x1a7a <LED_voidBinaryCounter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1a5e:	dc 01       	movw	r26, r24
    1a60:	cb 01       	movw	r24, r22
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	8d 81       	ldd	r24, Y+5	; 0x05
    1a68:	9e 81       	ldd	r25, Y+6	; 0x06
    1a6a:	9a 83       	std	Y+2, r25	; 0x02
    1a6c:	89 83       	std	Y+1, r24	; 0x01
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	01 97       	sbiw	r24, 0x01	; 1
    1a74:	f1 f7       	brne	.-4      	; 0x1a72 <LED_voidBinaryCounter+0x108>
    1a76:	9a 83       	std	Y+2, r25	; 0x02
    1a78:	89 83       	std	Y+1, r24	; 0x01

void LED_voidBinaryCounter(u8 Copy_u8PORT)
{
	DIO_enumSetPortDirection( Copy_u8PORT , DIO_PORT_OUTPUT );
	u8 i = 0;
	for(i = 0; i < 255; i++)
    1a7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a7c:	8f 5f       	subi	r24, 0xFF	; 255
    1a7e:	8f 87       	std	Y+15, r24	; 0x0f
    1a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a82:	8f 3f       	cpi	r24, 0xFF	; 255
    1a84:	09 f0       	breq	.+2      	; 0x1a88 <LED_voidBinaryCounter+0x11e>
    1a86:	83 cf       	rjmp	.-250    	; 0x198e <LED_voidBinaryCounter+0x24>
	{
		DIO_enumSetPortValue(Copy_u8PORT, i);
		_delay_ms(1000);
	}

}
    1a88:	60 96       	adiw	r28, 0x10	; 16
    1a8a:	0f b6       	in	r0, 0x3f	; 63
    1a8c:	f8 94       	cli
    1a8e:	de bf       	out	0x3e, r29	; 62
    1a90:	0f be       	out	0x3f, r0	; 63
    1a92:	cd bf       	out	0x3d, r28	; 61
    1a94:	cf 91       	pop	r28
    1a96:	df 91       	pop	r29
    1a98:	08 95       	ret

00001a9a <DIO_enumSetPinDirection>:




DIO_ErrorStatus DIO_enumSetPinDirection    (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Direction ) 
{
    1a9a:	df 93       	push	r29
    1a9c:	cf 93       	push	r28
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	28 97       	sbiw	r28, 0x08	; 8
    1aa4:	0f b6       	in	r0, 0x3f	; 63
    1aa6:	f8 94       	cli
    1aa8:	de bf       	out	0x3e, r29	; 62
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	cd bf       	out	0x3d, r28	; 61
    1aae:	8a 83       	std	Y+2, r24	; 0x02
    1ab0:	6b 83       	std	Y+3, r22	; 0x03
    1ab2:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1ab4:	81 e0       	ldi	r24, 0x01	; 1
    1ab6:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ab8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aba:	84 30       	cpi	r24, 0x04	; 4
    1abc:	08 f0       	brcs	.+2      	; 0x1ac0 <DIO_enumSetPinDirection+0x26>
    1abe:	f1 c0       	rjmp	.+482    	; 0x1ca2 <DIO_enumSetPinDirection+0x208>
    1ac0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac2:	88 30       	cpi	r24, 0x08	; 8
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <DIO_enumSetPinDirection+0x2e>
    1ac6:	ed c0       	rjmp	.+474    	; 0x1ca2 <DIO_enumSetPinDirection+0x208>
	{
		if ( Copy_u8Direction == DIO_PIN_OUTPUT )
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	09 f0       	breq	.+2      	; 0x1ad0 <DIO_enumSetPinDirection+0x36>
    1ace:	6f c0       	rjmp	.+222    	; 0x1bae <DIO_enumSetPinDirection+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1ad0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	38 87       	std	Y+8, r19	; 0x08
    1ad8:	2f 83       	std	Y+7, r18	; 0x07
    1ada:	8f 81       	ldd	r24, Y+7	; 0x07
    1adc:	98 85       	ldd	r25, Y+8	; 0x08
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	49 f1       	breq	.+82     	; 0x1b36 <DIO_enumSetPinDirection+0x9c>
    1ae4:	2f 81       	ldd	r18, Y+7	; 0x07
    1ae6:	38 85       	ldd	r19, Y+8	; 0x08
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	2c f4       	brge	.+10     	; 0x1af8 <DIO_enumSetPinDirection+0x5e>
    1aee:	8f 81       	ldd	r24, Y+7	; 0x07
    1af0:	98 85       	ldd	r25, Y+8	; 0x08
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	61 f0       	breq	.+24     	; 0x1b0e <DIO_enumSetPinDirection+0x74>
    1af6:	d6 c0       	rjmp	.+428    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
    1af8:	2f 81       	ldd	r18, Y+7	; 0x07
    1afa:	38 85       	ldd	r19, Y+8	; 0x08
    1afc:	22 30       	cpi	r18, 0x02	; 2
    1afe:	31 05       	cpc	r19, r1
    1b00:	71 f1       	breq	.+92     	; 0x1b5e <DIO_enumSetPinDirection+0xc4>
    1b02:	8f 81       	ldd	r24, Y+7	; 0x07
    1b04:	98 85       	ldd	r25, Y+8	; 0x08
    1b06:	83 30       	cpi	r24, 0x03	; 3
    1b08:	91 05       	cpc	r25, r1
    1b0a:	e9 f1       	breq	.+122    	; 0x1b86 <DIO_enumSetPinDirection+0xec>
    1b0c:	cb c0       	rjmp	.+406    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: SET_BIT(DDRA_Register,Copy_u8PIN); break;
    1b0e:	aa e3       	ldi	r26, 0x3A	; 58
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ea e3       	ldi	r30, 0x3A	; 58
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	02 2e       	mov	r0, r18
    1b26:	02 c0       	rjmp	.+4      	; 0x1b2c <DIO_enumSetPinDirection+0x92>
    1b28:	88 0f       	add	r24, r24
    1b2a:	99 1f       	adc	r25, r25
    1b2c:	0a 94       	dec	r0
    1b2e:	e2 f7       	brpl	.-8      	; 0x1b28 <DIO_enumSetPinDirection+0x8e>
    1b30:	84 2b       	or	r24, r20
    1b32:	8c 93       	st	X, r24
    1b34:	b7 c0       	rjmp	.+366    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: SET_BIT(DDRB_Register,Copy_u8PIN); break;
    1b36:	a7 e3       	ldi	r26, 0x37	; 55
    1b38:	b0 e0       	ldi	r27, 0x00	; 0
    1b3a:	e7 e3       	ldi	r30, 0x37	; 55
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	80 81       	ld	r24, Z
    1b40:	48 2f       	mov	r20, r24
    1b42:	8b 81       	ldd	r24, Y+3	; 0x03
    1b44:	28 2f       	mov	r18, r24
    1b46:	30 e0       	ldi	r19, 0x00	; 0
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	02 2e       	mov	r0, r18
    1b4e:	02 c0       	rjmp	.+4      	; 0x1b54 <DIO_enumSetPinDirection+0xba>
    1b50:	88 0f       	add	r24, r24
    1b52:	99 1f       	adc	r25, r25
    1b54:	0a 94       	dec	r0
    1b56:	e2 f7       	brpl	.-8      	; 0x1b50 <DIO_enumSetPinDirection+0xb6>
    1b58:	84 2b       	or	r24, r20
    1b5a:	8c 93       	st	X, r24
    1b5c:	a3 c0       	rjmp	.+326    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: SET_BIT(DDRC_Register,Copy_u8PIN); break;
    1b5e:	a4 e3       	ldi	r26, 0x34	; 52
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e4 e3       	ldi	r30, 0x34	; 52
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <DIO_enumSetPinDirection+0xe2>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <DIO_enumSetPinDirection+0xde>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	8f c0       	rjmp	.+286    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: SET_BIT(DDRD_Register,Copy_u8PIN); break;
    1b86:	a1 e3       	ldi	r26, 0x31	; 49
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e1 e3       	ldi	r30, 0x31	; 49
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_enumSetPinDirection+0x10a>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_enumSetPinDirection+0x106>
    1ba8:	84 2b       	or	r24, r20
    1baa:	8c 93       	st	X, r24
    1bac:	7b c0       	rjmp	.+246    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else if ( Copy_u8Direction == DIO_PIN_INPUT )
    1bae:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb0:	88 23       	and	r24, r24
    1bb2:	09 f0       	breq	.+2      	; 0x1bb6 <DIO_enumSetPinDirection+0x11c>
    1bb4:	74 c0       	rjmp	.+232    	; 0x1c9e <DIO_enumSetPinDirection+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1bb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb8:	28 2f       	mov	r18, r24
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	3e 83       	std	Y+6, r19	; 0x06
    1bbe:	2d 83       	std	Y+5, r18	; 0x05
    1bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	59 f1       	breq	.+86     	; 0x1c20 <DIO_enumSetPinDirection+0x186>
    1bca:	2d 81       	ldd	r18, Y+5	; 0x05
    1bcc:	3e 81       	ldd	r19, Y+6	; 0x06
    1bce:	22 30       	cpi	r18, 0x02	; 2
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	2c f4       	brge	.+10     	; 0x1bde <DIO_enumSetPinDirection+0x144>
    1bd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd8:	00 97       	sbiw	r24, 0x00	; 0
    1bda:	69 f0       	breq	.+26     	; 0x1bf6 <DIO_enumSetPinDirection+0x15c>
    1bdc:	63 c0       	rjmp	.+198    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
    1bde:	2d 81       	ldd	r18, Y+5	; 0x05
    1be0:	3e 81       	ldd	r19, Y+6	; 0x06
    1be2:	22 30       	cpi	r18, 0x02	; 2
    1be4:	31 05       	cpc	r19, r1
    1be6:	89 f1       	breq	.+98     	; 0x1c4a <DIO_enumSetPinDirection+0x1b0>
    1be8:	8d 81       	ldd	r24, Y+5	; 0x05
    1bea:	9e 81       	ldd	r25, Y+6	; 0x06
    1bec:	83 30       	cpi	r24, 0x03	; 3
    1bee:	91 05       	cpc	r25, r1
    1bf0:	09 f4       	brne	.+2      	; 0x1bf4 <DIO_enumSetPinDirection+0x15a>
    1bf2:	40 c0       	rjmp	.+128    	; 0x1c74 <DIO_enumSetPinDirection+0x1da>
    1bf4:	57 c0       	rjmp	.+174    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			{
			case DIO_PORTA: CLR_BIT(DDRA_Register,Copy_u8PIN); break;
    1bf6:	aa e3       	ldi	r26, 0x3A	; 58
    1bf8:	b0 e0       	ldi	r27, 0x00	; 0
    1bfa:	ea e3       	ldi	r30, 0x3A	; 58
    1bfc:	f0 e0       	ldi	r31, 0x00	; 0
    1bfe:	80 81       	ld	r24, Z
    1c00:	48 2f       	mov	r20, r24
    1c02:	8b 81       	ldd	r24, Y+3	; 0x03
    1c04:	28 2f       	mov	r18, r24
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	02 2e       	mov	r0, r18
    1c0e:	02 c0       	rjmp	.+4      	; 0x1c14 <DIO_enumSetPinDirection+0x17a>
    1c10:	88 0f       	add	r24, r24
    1c12:	99 1f       	adc	r25, r25
    1c14:	0a 94       	dec	r0
    1c16:	e2 f7       	brpl	.-8      	; 0x1c10 <DIO_enumSetPinDirection+0x176>
    1c18:	80 95       	com	r24
    1c1a:	84 23       	and	r24, r20
    1c1c:	8c 93       	st	X, r24
    1c1e:	42 c0       	rjmp	.+132    	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTB: CLR_BIT(DDRB_Register,Copy_u8PIN); break;
    1c20:	a7 e3       	ldi	r26, 0x37	; 55
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e7 e3       	ldi	r30, 0x37	; 55
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	80 81       	ld	r24, Z
    1c2a:	48 2f       	mov	r20, r24
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	28 2f       	mov	r18, r24
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	02 2e       	mov	r0, r18
    1c38:	02 c0       	rjmp	.+4      	; 0x1c3e <DIO_enumSetPinDirection+0x1a4>
    1c3a:	88 0f       	add	r24, r24
    1c3c:	99 1f       	adc	r25, r25
    1c3e:	0a 94       	dec	r0
    1c40:	e2 f7       	brpl	.-8      	; 0x1c3a <DIO_enumSetPinDirection+0x1a0>
    1c42:	80 95       	com	r24
    1c44:	84 23       	and	r24, r20
    1c46:	8c 93       	st	X, r24
    1c48:	2d c0       	rjmp	.+90     	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTC: CLR_BIT(DDRC_Register,Copy_u8PIN); break;
    1c4a:	a4 e3       	ldi	r26, 0x34	; 52
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e4 e3       	ldi	r30, 0x34	; 52
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	48 2f       	mov	r20, r24
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
    1c58:	28 2f       	mov	r18, r24
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	81 e0       	ldi	r24, 0x01	; 1
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	02 2e       	mov	r0, r18
    1c62:	02 c0       	rjmp	.+4      	; 0x1c68 <DIO_enumSetPinDirection+0x1ce>
    1c64:	88 0f       	add	r24, r24
    1c66:	99 1f       	adc	r25, r25
    1c68:	0a 94       	dec	r0
    1c6a:	e2 f7       	brpl	.-8      	; 0x1c64 <DIO_enumSetPinDirection+0x1ca>
    1c6c:	80 95       	com	r24
    1c6e:	84 23       	and	r24, r20
    1c70:	8c 93       	st	X, r24
    1c72:	18 c0       	rjmp	.+48     	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			case DIO_PORTD: CLR_BIT(DDRD_Register,Copy_u8PIN); break;
    1c74:	a1 e3       	ldi	r26, 0x31	; 49
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e1 e3       	ldi	r30, 0x31	; 49
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	48 2f       	mov	r20, r24
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	28 2f       	mov	r18, r24
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	90 e0       	ldi	r25, 0x00	; 0
    1c8a:	02 2e       	mov	r0, r18
    1c8c:	02 c0       	rjmp	.+4      	; 0x1c92 <DIO_enumSetPinDirection+0x1f8>
    1c8e:	88 0f       	add	r24, r24
    1c90:	99 1f       	adc	r25, r25
    1c92:	0a 94       	dec	r0
    1c94:	e2 f7       	brpl	.-8      	; 0x1c8e <DIO_enumSetPinDirection+0x1f4>
    1c96:	80 95       	com	r24
    1c98:	84 23       	and	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <DIO_enumSetPinDirection+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    1ca2:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ca6:	28 96       	adiw	r28, 0x08	; 8
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <DIO_enumSetPinValue>:

DIO_ErrorStatus DIO_enumSetPinValue      (u8 Copy_u8PORT , u8 Copy_u8PIN , u8 Copy_u8Value ) 
{
    1cb8:	df 93       	push	r29
    1cba:	cf 93       	push	r28
    1cbc:	cd b7       	in	r28, 0x3d	; 61
    1cbe:	de b7       	in	r29, 0x3e	; 62
    1cc0:	28 97       	sbiw	r28, 0x08	; 8
    1cc2:	0f b6       	in	r0, 0x3f	; 63
    1cc4:	f8 94       	cli
    1cc6:	de bf       	out	0x3e, r29	; 62
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	cd bf       	out	0x3d, r28	; 61
    1ccc:	8a 83       	std	Y+2, r24	; 0x02
    1cce:	6b 83       	std	Y+3, r22	; 0x03
    1cd0:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	84 30       	cpi	r24, 0x04	; 4
    1cda:	08 f0       	brcs	.+2      	; 0x1cde <DIO_enumSetPinValue+0x26>
    1cdc:	f1 c0       	rjmp	.+482    	; 0x1ec0 <DIO_enumSetPinValue+0x208>
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 30       	cpi	r24, 0x08	; 8
    1ce2:	08 f0       	brcs	.+2      	; 0x1ce6 <DIO_enumSetPinValue+0x2e>
    1ce4:	ed c0       	rjmp	.+474    	; 0x1ec0 <DIO_enumSetPinValue+0x208>
	{
		if (Copy_u8Value == DIO_PIN_HIGH)
    1ce6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	09 f0       	breq	.+2      	; 0x1cee <DIO_enumSetPinValue+0x36>
    1cec:	6f c0       	rjmp	.+222    	; 0x1dcc <DIO_enumSetPinValue+0x114>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	28 2f       	mov	r18, r24
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	38 87       	std	Y+8, r19	; 0x08
    1cf6:	2f 83       	std	Y+7, r18	; 0x07
    1cf8:	8f 81       	ldd	r24, Y+7	; 0x07
    1cfa:	98 85       	ldd	r25, Y+8	; 0x08
    1cfc:	81 30       	cpi	r24, 0x01	; 1
    1cfe:	91 05       	cpc	r25, r1
    1d00:	49 f1       	breq	.+82     	; 0x1d54 <DIO_enumSetPinValue+0x9c>
    1d02:	2f 81       	ldd	r18, Y+7	; 0x07
    1d04:	38 85       	ldd	r19, Y+8	; 0x08
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	31 05       	cpc	r19, r1
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <DIO_enumSetPinValue+0x5e>
    1d0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1d0e:	98 85       	ldd	r25, Y+8	; 0x08
    1d10:	00 97       	sbiw	r24, 0x00	; 0
    1d12:	61 f0       	breq	.+24     	; 0x1d2c <DIO_enumSetPinValue+0x74>
    1d14:	d6 c0       	rjmp	.+428    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
    1d16:	2f 81       	ldd	r18, Y+7	; 0x07
    1d18:	38 85       	ldd	r19, Y+8	; 0x08
    1d1a:	22 30       	cpi	r18, 0x02	; 2
    1d1c:	31 05       	cpc	r19, r1
    1d1e:	71 f1       	breq	.+92     	; 0x1d7c <DIO_enumSetPinValue+0xc4>
    1d20:	8f 81       	ldd	r24, Y+7	; 0x07
    1d22:	98 85       	ldd	r25, Y+8	; 0x08
    1d24:	83 30       	cpi	r24, 0x03	; 3
    1d26:	91 05       	cpc	r25, r1
    1d28:	e9 f1       	breq	.+122    	; 0x1da4 <DIO_enumSetPinValue+0xec>
    1d2a:	cb c0       	rjmp	.+406    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: SET_BIT(PORTA_Register,Copy_u8PIN); break;
    1d2c:	ab e3       	ldi	r26, 0x3B	; 59
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	eb e3       	ldi	r30, 0x3B	; 59
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	48 2f       	mov	r20, r24
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	02 2e       	mov	r0, r18
    1d44:	02 c0       	rjmp	.+4      	; 0x1d4a <DIO_enumSetPinValue+0x92>
    1d46:	88 0f       	add	r24, r24
    1d48:	99 1f       	adc	r25, r25
    1d4a:	0a 94       	dec	r0
    1d4c:	e2 f7       	brpl	.-8      	; 0x1d46 <DIO_enumSetPinValue+0x8e>
    1d4e:	84 2b       	or	r24, r20
    1d50:	8c 93       	st	X, r24
    1d52:	b7 c0       	rjmp	.+366    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: SET_BIT(PORTB_Register,Copy_u8PIN); break;
    1d54:	a8 e3       	ldi	r26, 0x38	; 56
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e8 e3       	ldi	r30, 0x38	; 56
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	48 2f       	mov	r20, r24
    1d60:	8b 81       	ldd	r24, Y+3	; 0x03
    1d62:	28 2f       	mov	r18, r24
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	02 2e       	mov	r0, r18
    1d6c:	02 c0       	rjmp	.+4      	; 0x1d72 <DIO_enumSetPinValue+0xba>
    1d6e:	88 0f       	add	r24, r24
    1d70:	99 1f       	adc	r25, r25
    1d72:	0a 94       	dec	r0
    1d74:	e2 f7       	brpl	.-8      	; 0x1d6e <DIO_enumSetPinValue+0xb6>
    1d76:	84 2b       	or	r24, r20
    1d78:	8c 93       	st	X, r24
    1d7a:	a3 c0       	rjmp	.+326    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: SET_BIT(PORTC_Register,Copy_u8PIN); break;
    1d7c:	a5 e3       	ldi	r26, 0x35	; 53
    1d7e:	b0 e0       	ldi	r27, 0x00	; 0
    1d80:	e5 e3       	ldi	r30, 0x35	; 53
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	80 81       	ld	r24, Z
    1d86:	48 2f       	mov	r20, r24
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	30 e0       	ldi	r19, 0x00	; 0
    1d8e:	81 e0       	ldi	r24, 0x01	; 1
    1d90:	90 e0       	ldi	r25, 0x00	; 0
    1d92:	02 2e       	mov	r0, r18
    1d94:	02 c0       	rjmp	.+4      	; 0x1d9a <DIO_enumSetPinValue+0xe2>
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	0a 94       	dec	r0
    1d9c:	e2 f7       	brpl	.-8      	; 0x1d96 <DIO_enumSetPinValue+0xde>
    1d9e:	84 2b       	or	r24, r20
    1da0:	8c 93       	st	X, r24
    1da2:	8f c0       	rjmp	.+286    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: SET_BIT(PORTD_Register,Copy_u8PIN); break;
    1da4:	a2 e3       	ldi	r26, 0x32	; 50
    1da6:	b0 e0       	ldi	r27, 0x00	; 0
    1da8:	e2 e3       	ldi	r30, 0x32	; 50
    1daa:	f0 e0       	ldi	r31, 0x00	; 0
    1dac:	80 81       	ld	r24, Z
    1dae:	48 2f       	mov	r20, r24
    1db0:	8b 81       	ldd	r24, Y+3	; 0x03
    1db2:	28 2f       	mov	r18, r24
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	81 e0       	ldi	r24, 0x01	; 1
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	02 2e       	mov	r0, r18
    1dbc:	02 c0       	rjmp	.+4      	; 0x1dc2 <DIO_enumSetPinValue+0x10a>
    1dbe:	88 0f       	add	r24, r24
    1dc0:	99 1f       	adc	r25, r25
    1dc2:	0a 94       	dec	r0
    1dc4:	e2 f7       	brpl	.-8      	; 0x1dbe <DIO_enumSetPinValue+0x106>
    1dc6:	84 2b       	or	r24, r20
    1dc8:	8c 93       	st	X, r24
    1dca:	7b c0       	rjmp	.+246    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			}

		}

		else if (Copy_u8Value == DIO_PIN_LOW)
    1dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dce:	88 23       	and	r24, r24
    1dd0:	09 f0       	breq	.+2      	; 0x1dd4 <DIO_enumSetPinValue+0x11c>
    1dd2:	74 c0       	rjmp	.+232    	; 0x1ebc <DIO_enumSetPinValue+0x204>
		{
			/* Check on the Required PORT Number */
			switch (Copy_u8PORT)
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	28 2f       	mov	r18, r24
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	3e 83       	std	Y+6, r19	; 0x06
    1ddc:	2d 83       	std	Y+5, r18	; 0x05
    1dde:	8d 81       	ldd	r24, Y+5	; 0x05
    1de0:	9e 81       	ldd	r25, Y+6	; 0x06
    1de2:	81 30       	cpi	r24, 0x01	; 1
    1de4:	91 05       	cpc	r25, r1
    1de6:	59 f1       	breq	.+86     	; 0x1e3e <DIO_enumSetPinValue+0x186>
    1de8:	2d 81       	ldd	r18, Y+5	; 0x05
    1dea:	3e 81       	ldd	r19, Y+6	; 0x06
    1dec:	22 30       	cpi	r18, 0x02	; 2
    1dee:	31 05       	cpc	r19, r1
    1df0:	2c f4       	brge	.+10     	; 0x1dfc <DIO_enumSetPinValue+0x144>
    1df2:	8d 81       	ldd	r24, Y+5	; 0x05
    1df4:	9e 81       	ldd	r25, Y+6	; 0x06
    1df6:	00 97       	sbiw	r24, 0x00	; 0
    1df8:	69 f0       	breq	.+26     	; 0x1e14 <DIO_enumSetPinValue+0x15c>
    1dfa:	63 c0       	rjmp	.+198    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
    1dfc:	2d 81       	ldd	r18, Y+5	; 0x05
    1dfe:	3e 81       	ldd	r19, Y+6	; 0x06
    1e00:	22 30       	cpi	r18, 0x02	; 2
    1e02:	31 05       	cpc	r19, r1
    1e04:	89 f1       	breq	.+98     	; 0x1e68 <DIO_enumSetPinValue+0x1b0>
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	9e 81       	ldd	r25, Y+6	; 0x06
    1e0a:	83 30       	cpi	r24, 0x03	; 3
    1e0c:	91 05       	cpc	r25, r1
    1e0e:	09 f4       	brne	.+2      	; 0x1e12 <DIO_enumSetPinValue+0x15a>
    1e10:	40 c0       	rjmp	.+128    	; 0x1e92 <DIO_enumSetPinValue+0x1da>
    1e12:	57 c0       	rjmp	.+174    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			{
			case DIO_PORTA: CLR_BIT(PORTA_Register,Copy_u8PIN); break;
    1e14:	ab e3       	ldi	r26, 0x3B	; 59
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	eb e3       	ldi	r30, 0x3B	; 59
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	48 2f       	mov	r20, r24
    1e20:	8b 81       	ldd	r24, Y+3	; 0x03
    1e22:	28 2f       	mov	r18, r24
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	02 2e       	mov	r0, r18
    1e2c:	02 c0       	rjmp	.+4      	; 0x1e32 <DIO_enumSetPinValue+0x17a>
    1e2e:	88 0f       	add	r24, r24
    1e30:	99 1f       	adc	r25, r25
    1e32:	0a 94       	dec	r0
    1e34:	e2 f7       	brpl	.-8      	; 0x1e2e <DIO_enumSetPinValue+0x176>
    1e36:	80 95       	com	r24
    1e38:	84 23       	and	r24, r20
    1e3a:	8c 93       	st	X, r24
    1e3c:	42 c0       	rjmp	.+132    	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTB: CLR_BIT(PORTB_Register,Copy_u8PIN); break;
    1e3e:	a8 e3       	ldi	r26, 0x38	; 56
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	e8 e3       	ldi	r30, 0x38	; 56
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	48 2f       	mov	r20, r24
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	28 2f       	mov	r18, r24
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	02 2e       	mov	r0, r18
    1e56:	02 c0       	rjmp	.+4      	; 0x1e5c <DIO_enumSetPinValue+0x1a4>
    1e58:	88 0f       	add	r24, r24
    1e5a:	99 1f       	adc	r25, r25
    1e5c:	0a 94       	dec	r0
    1e5e:	e2 f7       	brpl	.-8      	; 0x1e58 <DIO_enumSetPinValue+0x1a0>
    1e60:	80 95       	com	r24
    1e62:	84 23       	and	r24, r20
    1e64:	8c 93       	st	X, r24
    1e66:	2d c0       	rjmp	.+90     	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTC: CLR_BIT(PORTC_Register,Copy_u8PIN); break;
    1e68:	a5 e3       	ldi	r26, 0x35	; 53
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	e5 e3       	ldi	r30, 0x35	; 53
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	48 2f       	mov	r20, r24
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	28 2f       	mov	r18, r24
    1e78:	30 e0       	ldi	r19, 0x00	; 0
    1e7a:	81 e0       	ldi	r24, 0x01	; 1
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	02 2e       	mov	r0, r18
    1e80:	02 c0       	rjmp	.+4      	; 0x1e86 <DIO_enumSetPinValue+0x1ce>
    1e82:	88 0f       	add	r24, r24
    1e84:	99 1f       	adc	r25, r25
    1e86:	0a 94       	dec	r0
    1e88:	e2 f7       	brpl	.-8      	; 0x1e82 <DIO_enumSetPinValue+0x1ca>
    1e8a:	80 95       	com	r24
    1e8c:	84 23       	and	r24, r20
    1e8e:	8c 93       	st	X, r24
    1e90:	18 c0       	rjmp	.+48     	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			case DIO_PORTD: CLR_BIT(PORTD_Register,Copy_u8PIN); break;
    1e92:	a2 e3       	ldi	r26, 0x32	; 50
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	e2 e3       	ldi	r30, 0x32	; 50
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	48 2f       	mov	r20, r24
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	28 2f       	mov	r18, r24
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	02 2e       	mov	r0, r18
    1eaa:	02 c0       	rjmp	.+4      	; 0x1eb0 <DIO_enumSetPinValue+0x1f8>
    1eac:	88 0f       	add	r24, r24
    1eae:	99 1f       	adc	r25, r25
    1eb0:	0a 94       	dec	r0
    1eb2:	e2 f7       	brpl	.-8      	; 0x1eac <DIO_enumSetPinValue+0x1f4>
    1eb4:	80 95       	com	r24
    1eb6:	84 23       	and	r24, r20
    1eb8:	8c 93       	st	X, r24
    1eba:	03 c0       	rjmp	.+6      	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    1ebc:	19 82       	std	Y+1, r1	; 0x01
    1ebe:	01 c0       	rjmp	.+2      	; 0x1ec2 <DIO_enumSetPinValue+0x20a>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    1ec0:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    1ec2:	89 81       	ldd	r24, Y+1	; 0x01

}
    1ec4:	28 96       	adiw	r28, 0x08	; 8
    1ec6:	0f b6       	in	r0, 0x3f	; 63
    1ec8:	f8 94       	cli
    1eca:	de bf       	out	0x3e, r29	; 62
    1ecc:	0f be       	out	0x3f, r0	; 63
    1ece:	cd bf       	out	0x3d, r28	; 61
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <DIO_enumGetPinValue>:



DIO_ErrorStatus DIO_enumGetPinValue          (u8 Copy_u8PORT, u8 Copy_u8PIN, u8 * Copy_PtrData   )
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	27 97       	sbiw	r28, 0x07	; 7
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	6b 83       	std	Y+3, r22	; 0x03
    1eee:	5d 83       	std	Y+5, r21	; 0x05
    1ef0:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    1ef6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	08 f0       	brcs	.+2      	; 0x1efe <DIO_enumGetPinValue+0x28>
    1efc:	a6 c0       	rjmp	.+332    	; 0x204a <DIO_enumGetPinValue+0x174>
    1efe:	8b 81       	ldd	r24, Y+3	; 0x03
    1f00:	88 30       	cpi	r24, 0x08	; 8
    1f02:	08 f0       	brcs	.+2      	; 0x1f06 <DIO_enumGetPinValue+0x30>
    1f04:	a2 c0       	rjmp	.+324    	; 0x204a <DIO_enumGetPinValue+0x174>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    1f06:	8a 81       	ldd	r24, Y+2	; 0x02
    1f08:	28 2f       	mov	r18, r24
    1f0a:	30 e0       	ldi	r19, 0x00	; 0
    1f0c:	3f 83       	std	Y+7, r19	; 0x07
    1f0e:	2e 83       	std	Y+6, r18	; 0x06
    1f10:	4e 81       	ldd	r20, Y+6	; 0x06
    1f12:	5f 81       	ldd	r21, Y+7	; 0x07
    1f14:	41 30       	cpi	r20, 0x01	; 1
    1f16:	51 05       	cpc	r21, r1
    1f18:	c1 f1       	breq	.+112    	; 0x1f8a <DIO_enumGetPinValue+0xb4>
    1f1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1e:	82 30       	cpi	r24, 0x02	; 2
    1f20:	91 05       	cpc	r25, r1
    1f22:	34 f4       	brge	.+12     	; 0x1f30 <DIO_enumGetPinValue+0x5a>
    1f24:	2e 81       	ldd	r18, Y+6	; 0x06
    1f26:	3f 81       	ldd	r19, Y+7	; 0x07
    1f28:	21 15       	cp	r18, r1
    1f2a:	31 05       	cpc	r19, r1
    1f2c:	71 f0       	breq	.+28     	; 0x1f4a <DIO_enumGetPinValue+0x74>
    1f2e:	8e c0       	rjmp	.+284    	; 0x204c <DIO_enumGetPinValue+0x176>
    1f30:	4e 81       	ldd	r20, Y+6	; 0x06
    1f32:	5f 81       	ldd	r21, Y+7	; 0x07
    1f34:	42 30       	cpi	r20, 0x02	; 2
    1f36:	51 05       	cpc	r21, r1
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <DIO_enumGetPinValue+0x66>
    1f3a:	47 c0       	rjmp	.+142    	; 0x1fca <DIO_enumGetPinValue+0xf4>
    1f3c:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3e:	9f 81       	ldd	r25, Y+7	; 0x07
    1f40:	83 30       	cpi	r24, 0x03	; 3
    1f42:	91 05       	cpc	r25, r1
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <DIO_enumGetPinValue+0x72>
    1f46:	61 c0       	rjmp	.+194    	; 0x200a <DIO_enumGetPinValue+0x134>
    1f48:	81 c0       	rjmp	.+258    	; 0x204c <DIO_enumGetPinValue+0x176>
		{
		case DIO_PORTA: * Copy_PtrData = GET_BIT(PINA_Register,Copy_u8PIN); break;
    1f4a:	e9 e3       	ldi	r30, 0x39	; 57
    1f4c:	f0 e0       	ldi	r31, 0x00	; 0
    1f4e:	80 81       	ld	r24, Z
    1f50:	48 2f       	mov	r20, r24
    1f52:	50 e0       	ldi	r21, 0x00	; 0
    1f54:	8b 81       	ldd	r24, Y+3	; 0x03
    1f56:	28 2f       	mov	r18, r24
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	81 e0       	ldi	r24, 0x01	; 1
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <DIO_enumGetPinValue+0x8e>
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	2a 95       	dec	r18
    1f66:	e2 f7       	brpl	.-8      	; 0x1f60 <DIO_enumGetPinValue+0x8a>
    1f68:	9a 01       	movw	r18, r20
    1f6a:	28 23       	and	r18, r24
    1f6c:	39 23       	and	r19, r25
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	88 2f       	mov	r24, r24
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	a9 01       	movw	r20, r18
    1f76:	02 c0       	rjmp	.+4      	; 0x1f7c <DIO_enumGetPinValue+0xa6>
    1f78:	55 95       	asr	r21
    1f7a:	47 95       	ror	r20
    1f7c:	8a 95       	dec	r24
    1f7e:	e2 f7       	brpl	.-8      	; 0x1f78 <DIO_enumGetPinValue+0xa2>
    1f80:	ca 01       	movw	r24, r20
    1f82:	ec 81       	ldd	r30, Y+4	; 0x04
    1f84:	fd 81       	ldd	r31, Y+5	; 0x05
    1f86:	80 83       	st	Z, r24
    1f88:	61 c0       	rjmp	.+194    	; 0x204c <DIO_enumGetPinValue+0x176>
		case DIO_PORTB: * Copy_PtrData = GET_BIT(PINB_Register,Copy_u8PIN); break;
    1f8a:	e6 e3       	ldi	r30, 0x36	; 54
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	48 2f       	mov	r20, r24
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	8b 81       	ldd	r24, Y+3	; 0x03
    1f96:	28 2f       	mov	r18, r24
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	90 e0       	ldi	r25, 0x00	; 0
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_enumGetPinValue+0xce>
    1fa0:	88 0f       	add	r24, r24
    1fa2:	99 1f       	adc	r25, r25
    1fa4:	2a 95       	dec	r18
    1fa6:	e2 f7       	brpl	.-8      	; 0x1fa0 <DIO_enumGetPinValue+0xca>
    1fa8:	9a 01       	movw	r18, r20
    1faa:	28 23       	and	r18, r24
    1fac:	39 23       	and	r19, r25
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	88 2f       	mov	r24, r24
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	a9 01       	movw	r20, r18
    1fb6:	02 c0       	rjmp	.+4      	; 0x1fbc <DIO_enumGetPinValue+0xe6>
    1fb8:	55 95       	asr	r21
    1fba:	47 95       	ror	r20
    1fbc:	8a 95       	dec	r24
    1fbe:	e2 f7       	brpl	.-8      	; 0x1fb8 <DIO_enumGetPinValue+0xe2>
    1fc0:	ca 01       	movw	r24, r20
    1fc2:	ec 81       	ldd	r30, Y+4	; 0x04
    1fc4:	fd 81       	ldd	r31, Y+5	; 0x05
    1fc6:	80 83       	st	Z, r24
    1fc8:	41 c0       	rjmp	.+130    	; 0x204c <DIO_enumGetPinValue+0x176>
		case DIO_PORTC: * Copy_PtrData = GET_BIT(PINC_Register,Copy_u8PIN); break;
    1fca:	e3 e3       	ldi	r30, 0x33	; 51
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 81       	ld	r24, Z
    1fd0:	48 2f       	mov	r20, r24
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	28 2f       	mov	r18, r24
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	90 e0       	ldi	r25, 0x00	; 0
    1fde:	02 c0       	rjmp	.+4      	; 0x1fe4 <DIO_enumGetPinValue+0x10e>
    1fe0:	88 0f       	add	r24, r24
    1fe2:	99 1f       	adc	r25, r25
    1fe4:	2a 95       	dec	r18
    1fe6:	e2 f7       	brpl	.-8      	; 0x1fe0 <DIO_enumGetPinValue+0x10a>
    1fe8:	9a 01       	movw	r18, r20
    1fea:	28 23       	and	r18, r24
    1fec:	39 23       	and	r19, r25
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	88 2f       	mov	r24, r24
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	a9 01       	movw	r20, r18
    1ff6:	02 c0       	rjmp	.+4      	; 0x1ffc <DIO_enumGetPinValue+0x126>
    1ff8:	55 95       	asr	r21
    1ffa:	47 95       	ror	r20
    1ffc:	8a 95       	dec	r24
    1ffe:	e2 f7       	brpl	.-8      	; 0x1ff8 <DIO_enumGetPinValue+0x122>
    2000:	ca 01       	movw	r24, r20
    2002:	ec 81       	ldd	r30, Y+4	; 0x04
    2004:	fd 81       	ldd	r31, Y+5	; 0x05
    2006:	80 83       	st	Z, r24
    2008:	21 c0       	rjmp	.+66     	; 0x204c <DIO_enumGetPinValue+0x176>
		case DIO_PORTD: * Copy_PtrData = GET_BIT(PIND_Register,Copy_u8PIN); break;
    200a:	e0 e3       	ldi	r30, 0x30	; 48
    200c:	f0 e0       	ldi	r31, 0x00	; 0
    200e:	80 81       	ld	r24, Z
    2010:	48 2f       	mov	r20, r24
    2012:	50 e0       	ldi	r21, 0x00	; 0
    2014:	8b 81       	ldd	r24, Y+3	; 0x03
    2016:	28 2f       	mov	r18, r24
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	81 e0       	ldi	r24, 0x01	; 1
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	02 c0       	rjmp	.+4      	; 0x2024 <DIO_enumGetPinValue+0x14e>
    2020:	88 0f       	add	r24, r24
    2022:	99 1f       	adc	r25, r25
    2024:	2a 95       	dec	r18
    2026:	e2 f7       	brpl	.-8      	; 0x2020 <DIO_enumGetPinValue+0x14a>
    2028:	9a 01       	movw	r18, r20
    202a:	28 23       	and	r18, r24
    202c:	39 23       	and	r19, r25
    202e:	8b 81       	ldd	r24, Y+3	; 0x03
    2030:	88 2f       	mov	r24, r24
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	a9 01       	movw	r20, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_enumGetPinValue+0x166>
    2038:	55 95       	asr	r21
    203a:	47 95       	ror	r20
    203c:	8a 95       	dec	r24
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_enumGetPinValue+0x162>
    2040:	ca 01       	movw	r24, r20
    2042:	ec 81       	ldd	r30, Y+4	; 0x04
    2044:	fd 81       	ldd	r31, Y+5	; 0x05
    2046:	80 83       	st	Z, r24
    2048:	01 c0       	rjmp	.+2      	; 0x204c <DIO_enumGetPinValue+0x176>
	}

	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    204a:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    204c:	89 81       	ldd	r24, Y+1	; 0x01
}
    204e:	27 96       	adiw	r28, 0x07	; 7
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <DIO_enumTogglePinValue>:


DIO_ErrorStatus DIO_enumTogglePinValue  ( u8 Copy_u8PORT, u8 Copy_u8PIN )
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	00 d0       	rcall	.+0      	; 0x2066 <DIO_enumTogglePinValue+0x6>
    2066:	00 d0       	rcall	.+0      	; 0x2068 <DIO_enumTogglePinValue+0x8>
    2068:	0f 92       	push	r0
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	8a 83       	std	Y+2, r24	; 0x02
    2070:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8PIN <= DIO_PIN7)
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	88 30       	cpi	r24, 0x08	; 8
    207a:	08 f0       	brcs	.+2      	; 0x207e <DIO_enumTogglePinValue+0x1e>
    207c:	6f c0       	rjmp	.+222    	; 0x215c <DIO_enumTogglePinValue+0xfc>
	{
		switch (Copy_u8PORT)
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	28 2f       	mov	r18, r24
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	3d 83       	std	Y+5, r19	; 0x05
    2086:	2c 83       	std	Y+4, r18	; 0x04
    2088:	8c 81       	ldd	r24, Y+4	; 0x04
    208a:	9d 81       	ldd	r25, Y+5	; 0x05
    208c:	81 30       	cpi	r24, 0x01	; 1
    208e:	91 05       	cpc	r25, r1
    2090:	49 f1       	breq	.+82     	; 0x20e4 <DIO_enumTogglePinValue+0x84>
    2092:	2c 81       	ldd	r18, Y+4	; 0x04
    2094:	3d 81       	ldd	r19, Y+5	; 0x05
    2096:	22 30       	cpi	r18, 0x02	; 2
    2098:	31 05       	cpc	r19, r1
    209a:	2c f4       	brge	.+10     	; 0x20a6 <DIO_enumTogglePinValue+0x46>
    209c:	8c 81       	ldd	r24, Y+4	; 0x04
    209e:	9d 81       	ldd	r25, Y+5	; 0x05
    20a0:	00 97       	sbiw	r24, 0x00	; 0
    20a2:	61 f0       	breq	.+24     	; 0x20bc <DIO_enumTogglePinValue+0x5c>
    20a4:	5c c0       	rjmp	.+184    	; 0x215e <DIO_enumTogglePinValue+0xfe>
    20a6:	2c 81       	ldd	r18, Y+4	; 0x04
    20a8:	3d 81       	ldd	r19, Y+5	; 0x05
    20aa:	22 30       	cpi	r18, 0x02	; 2
    20ac:	31 05       	cpc	r19, r1
    20ae:	71 f1       	breq	.+92     	; 0x210c <DIO_enumTogglePinValue+0xac>
    20b0:	8c 81       	ldd	r24, Y+4	; 0x04
    20b2:	9d 81       	ldd	r25, Y+5	; 0x05
    20b4:	83 30       	cpi	r24, 0x03	; 3
    20b6:	91 05       	cpc	r25, r1
    20b8:	e9 f1       	breq	.+122    	; 0x2134 <DIO_enumTogglePinValue+0xd4>
    20ba:	51 c0       	rjmp	.+162    	; 0x215e <DIO_enumTogglePinValue+0xfe>
		{
		case DIO_PORTA : TOG_BIT(PORTA_Register,Copy_u8PIN);
    20bc:	ab e3       	ldi	r26, 0x3B	; 59
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	eb e3       	ldi	r30, 0x3B	; 59
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	48 2f       	mov	r20, r24
    20c8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ca:	28 2f       	mov	r18, r24
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	81 e0       	ldi	r24, 0x01	; 1
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	02 2e       	mov	r0, r18
    20d4:	02 c0       	rjmp	.+4      	; 0x20da <DIO_enumTogglePinValue+0x7a>
    20d6:	88 0f       	add	r24, r24
    20d8:	99 1f       	adc	r25, r25
    20da:	0a 94       	dec	r0
    20dc:	e2 f7       	brpl	.-8      	; 0x20d6 <DIO_enumTogglePinValue+0x76>
    20de:	84 27       	eor	r24, r20
    20e0:	8c 93       	st	X, r24
    20e2:	3d c0       	rjmp	.+122    	; 0x215e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTB : TOG_BIT(PORTB_Register,Copy_u8PIN);
    20e4:	a8 e3       	ldi	r26, 0x38	; 56
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e8 e3       	ldi	r30, 0x38	; 56
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	48 2f       	mov	r20, r24
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	28 2f       	mov	r18, r24
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	02 2e       	mov	r0, r18
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <DIO_enumTogglePinValue+0xa2>
    20fe:	88 0f       	add	r24, r24
    2100:	99 1f       	adc	r25, r25
    2102:	0a 94       	dec	r0
    2104:	e2 f7       	brpl	.-8      	; 0x20fe <DIO_enumTogglePinValue+0x9e>
    2106:	84 27       	eor	r24, r20
    2108:	8c 93       	st	X, r24
    210a:	29 c0       	rjmp	.+82     	; 0x215e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTC : TOG_BIT(PORTC_Register,Copy_u8PIN);
    210c:	a5 e3       	ldi	r26, 0x35	; 53
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e5 e3       	ldi	r30, 0x35	; 53
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	48 2f       	mov	r20, r24
    2118:	8b 81       	ldd	r24, Y+3	; 0x03
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	02 2e       	mov	r0, r18
    2124:	02 c0       	rjmp	.+4      	; 0x212a <DIO_enumTogglePinValue+0xca>
    2126:	88 0f       	add	r24, r24
    2128:	99 1f       	adc	r25, r25
    212a:	0a 94       	dec	r0
    212c:	e2 f7       	brpl	.-8      	; 0x2126 <DIO_enumTogglePinValue+0xc6>
    212e:	84 27       	eor	r24, r20
    2130:	8c 93       	st	X, r24
    2132:	15 c0       	rjmp	.+42     	; 0x215e <DIO_enumTogglePinValue+0xfe>
		break ;
		case DIO_PORTD : TOG_BIT(PORTD_Register,Copy_u8PIN);
    2134:	a2 e3       	ldi	r26, 0x32	; 50
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e2 e3       	ldi	r30, 0x32	; 50
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	48 2f       	mov	r20, r24
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	81 e0       	ldi	r24, 0x01	; 1
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	02 2e       	mov	r0, r18
    214c:	02 c0       	rjmp	.+4      	; 0x2152 <DIO_enumTogglePinValue+0xf2>
    214e:	88 0f       	add	r24, r24
    2150:	99 1f       	adc	r25, r25
    2152:	0a 94       	dec	r0
    2154:	e2 f7       	brpl	.-8      	; 0x214e <DIO_enumTogglePinValue+0xee>
    2156:	84 27       	eor	r24, r20
    2158:	8c 93       	st	X, r24
    215a:	01 c0       	rjmp	.+2      	; 0x215e <DIO_enumTogglePinValue+0xfe>

	}
	else
	{
		/* in case of error in the Pin ID or PORT ID */
		LOC_enumState = DIO_NOK ;
    215c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState;
    215e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2160:	0f 90       	pop	r0
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	cf 91       	pop	r28
    216c:	df 91       	pop	r29
    216e:	08 95       	ret

00002170 <DIO_enumConnectPullup>:


DIO_ErrorStatus DIO_enumConnectPullup (u8 Copy_u8PORT ,u8 Copy_u8PIN, u8 Copy_u8ConnectPullup)
{
    2170:	df 93       	push	r29
    2172:	cf 93       	push	r28
    2174:	00 d0       	rcall	.+0      	; 0x2176 <DIO_enumConnectPullup+0x6>
    2176:	00 d0       	rcall	.+0      	; 0x2178 <DIO_enumConnectPullup+0x8>
    2178:	00 d0       	rcall	.+0      	; 0x217a <DIO_enumConnectPullup+0xa>
    217a:	cd b7       	in	r28, 0x3d	; 61
    217c:	de b7       	in	r29, 0x3e	; 62
    217e:	8a 83       	std	Y+2, r24	; 0x02
    2180:	6b 83       	std	Y+3, r22	; 0x03
    2182:	4c 83       	std	Y+4, r20	; 0x04

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	89 83       	std	Y+1, r24	; 0x01

	if ((Copy_u8PORT <= DIO_PORTD) && (Copy_u8PIN <= DIO_PIN7))
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	84 30       	cpi	r24, 0x04	; 4
    218c:	08 f0       	brcs	.+2      	; 0x2190 <DIO_enumConnectPullup+0x20>
    218e:	3e c1       	rjmp	.+636    	; 0x240c <DIO_enumConnectPullup+0x29c>
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	88 30       	cpi	r24, 0x08	; 8
    2194:	08 f0       	brcs	.+2      	; 0x2198 <DIO_enumConnectPullup+0x28>
    2196:	3a c1       	rjmp	.+628    	; 0x240c <DIO_enumConnectPullup+0x29c>
	{
		switch(Copy_u8PORT)
    2198:	8a 81       	ldd	r24, Y+2	; 0x02
    219a:	28 2f       	mov	r18, r24
    219c:	30 e0       	ldi	r19, 0x00	; 0
    219e:	3e 83       	std	Y+6, r19	; 0x06
    21a0:	2d 83       	std	Y+5, r18	; 0x05
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	9e 81       	ldd	r25, Y+6	; 0x06
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	91 05       	cpc	r25, r1
    21aa:	09 f4       	brne	.+2      	; 0x21ae <DIO_enumConnectPullup+0x3e>
    21ac:	5d c0       	rjmp	.+186    	; 0x2268 <DIO_enumConnectPullup+0xf8>
    21ae:	2d 81       	ldd	r18, Y+5	; 0x05
    21b0:	3e 81       	ldd	r19, Y+6	; 0x06
    21b2:	22 30       	cpi	r18, 0x02	; 2
    21b4:	31 05       	cpc	r19, r1
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <DIO_enumConnectPullup+0x52>
    21b8:	8d 81       	ldd	r24, Y+5	; 0x05
    21ba:	9e 81       	ldd	r25, Y+6	; 0x06
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	71 f0       	breq	.+28     	; 0x21dc <DIO_enumConnectPullup+0x6c>
    21c0:	26 c1       	rjmp	.+588    	; 0x240e <DIO_enumConnectPullup+0x29e>
    21c2:	2d 81       	ldd	r18, Y+5	; 0x05
    21c4:	3e 81       	ldd	r19, Y+6	; 0x06
    21c6:	22 30       	cpi	r18, 0x02	; 2
    21c8:	31 05       	cpc	r19, r1
    21ca:	09 f4       	brne	.+2      	; 0x21ce <DIO_enumConnectPullup+0x5e>
    21cc:	93 c0       	rjmp	.+294    	; 0x22f4 <DIO_enumConnectPullup+0x184>
    21ce:	8d 81       	ldd	r24, Y+5	; 0x05
    21d0:	9e 81       	ldd	r25, Y+6	; 0x06
    21d2:	83 30       	cpi	r24, 0x03	; 3
    21d4:	91 05       	cpc	r25, r1
    21d6:	09 f4       	brne	.+2      	; 0x21da <DIO_enumConnectPullup+0x6a>
    21d8:	d3 c0       	rjmp	.+422    	; 0x2380 <DIO_enumConnectPullup+0x210>
    21da:	19 c1       	rjmp	.+562    	; 0x240e <DIO_enumConnectPullup+0x29e>
		{
		/* Connect or disconnect the pull up resistance to the given pin in port A */
		case DIO_PORTA:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    21dc:	8c 81       	ldd	r24, Y+4	; 0x04
    21de:	81 30       	cpi	r24, 0x01	; 1
    21e0:	71 f5       	brne	.+92     	; 0x223e <DIO_enumConnectPullup+0xce>
			{
				CLR_BIT(SFIOR,PUD);
    21e2:	a0 e5       	ldi	r26, 0x50	; 80
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e0 e5       	ldi	r30, 0x50	; 80
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	8b 7f       	andi	r24, 0xFB	; 251
    21ee:	8c 93       	st	X, r24
				CLR_BIT(DDRA_Register,Copy_u8PIN);
    21f0:	aa e3       	ldi	r26, 0x3A	; 58
    21f2:	b0 e0       	ldi	r27, 0x00	; 0
    21f4:	ea e3       	ldi	r30, 0x3A	; 58
    21f6:	f0 e0       	ldi	r31, 0x00	; 0
    21f8:	80 81       	ld	r24, Z
    21fa:	48 2f       	mov	r20, r24
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	28 2f       	mov	r18, r24
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	81 e0       	ldi	r24, 0x01	; 1
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	02 c0       	rjmp	.+4      	; 0x220c <DIO_enumConnectPullup+0x9c>
    2208:	88 0f       	add	r24, r24
    220a:	99 1f       	adc	r25, r25
    220c:	2a 95       	dec	r18
    220e:	e2 f7       	brpl	.-8      	; 0x2208 <DIO_enumConnectPullup+0x98>
    2210:	80 95       	com	r24
    2212:	84 23       	and	r24, r20
    2214:	8c 93       	st	X, r24
				SET_BIT(PORTA_Register,Copy_u8PIN);
    2216:	ab e3       	ldi	r26, 0x3B	; 59
    2218:	b0 e0       	ldi	r27, 0x00	; 0
    221a:	eb e3       	ldi	r30, 0x3B	; 59
    221c:	f0 e0       	ldi	r31, 0x00	; 0
    221e:	80 81       	ld	r24, Z
    2220:	48 2f       	mov	r20, r24
    2222:	8b 81       	ldd	r24, Y+3	; 0x03
    2224:	28 2f       	mov	r18, r24
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	02 2e       	mov	r0, r18
    222e:	02 c0       	rjmp	.+4      	; 0x2234 <DIO_enumConnectPullup+0xc4>
    2230:	88 0f       	add	r24, r24
    2232:	99 1f       	adc	r25, r25
    2234:	0a 94       	dec	r0
    2236:	e2 f7       	brpl	.-8      	; 0x2230 <DIO_enumConnectPullup+0xc0>
    2238:	84 2b       	or	r24, r20
    223a:	8c 93       	st	X, r24
    223c:	e8 c0       	rjmp	.+464    	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTA_Register,Copy_u8PIN);
    223e:	ab e3       	ldi	r26, 0x3B	; 59
    2240:	b0 e0       	ldi	r27, 0x00	; 0
    2242:	eb e3       	ldi	r30, 0x3B	; 59
    2244:	f0 e0       	ldi	r31, 0x00	; 0
    2246:	80 81       	ld	r24, Z
    2248:	48 2f       	mov	r20, r24
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	28 2f       	mov	r18, r24
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 2e       	mov	r0, r18
    2256:	02 c0       	rjmp	.+4      	; 0x225c <DIO_enumConnectPullup+0xec>
    2258:	88 0f       	add	r24, r24
    225a:	99 1f       	adc	r25, r25
    225c:	0a 94       	dec	r0
    225e:	e2 f7       	brpl	.-8      	; 0x2258 <DIO_enumConnectPullup+0xe8>
    2260:	80 95       	com	r24
    2262:	84 23       	and	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	d3 c0       	rjmp	.+422    	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port B */
		case DIO_PORTB:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	81 30       	cpi	r24, 0x01	; 1
    226c:	71 f5       	brne	.+92     	; 0x22ca <DIO_enumConnectPullup+0x15a>
			{
				CLR_BIT(SFIOR,PUD);
    226e:	a0 e5       	ldi	r26, 0x50	; 80
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e0 e5       	ldi	r30, 0x50	; 80
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	8b 7f       	andi	r24, 0xFB	; 251
    227a:	8c 93       	st	X, r24
				CLR_BIT(DDRB_Register,Copy_u8PIN);
    227c:	a7 e3       	ldi	r26, 0x37	; 55
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e7 e3       	ldi	r30, 0x37	; 55
    2282:	f0 e0       	ldi	r31, 0x00	; 0
    2284:	80 81       	ld	r24, Z
    2286:	48 2f       	mov	r20, r24
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	28 2f       	mov	r18, r24
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	81 e0       	ldi	r24, 0x01	; 1
    2290:	90 e0       	ldi	r25, 0x00	; 0
    2292:	02 c0       	rjmp	.+4      	; 0x2298 <DIO_enumConnectPullup+0x128>
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	2a 95       	dec	r18
    229a:	e2 f7       	brpl	.-8      	; 0x2294 <DIO_enumConnectPullup+0x124>
    229c:	80 95       	com	r24
    229e:	84 23       	and	r24, r20
    22a0:	8c 93       	st	X, r24
				SET_BIT(PORTB_Register,Copy_u8PIN);
    22a2:	a8 e3       	ldi	r26, 0x38	; 56
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e8 e3       	ldi	r30, 0x38	; 56
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	48 2f       	mov	r20, r24
    22ae:	8b 81       	ldd	r24, Y+3	; 0x03
    22b0:	28 2f       	mov	r18, r24
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	81 e0       	ldi	r24, 0x01	; 1
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	02 2e       	mov	r0, r18
    22ba:	02 c0       	rjmp	.+4      	; 0x22c0 <DIO_enumConnectPullup+0x150>
    22bc:	88 0f       	add	r24, r24
    22be:	99 1f       	adc	r25, r25
    22c0:	0a 94       	dec	r0
    22c2:	e2 f7       	brpl	.-8      	; 0x22bc <DIO_enumConnectPullup+0x14c>
    22c4:	84 2b       	or	r24, r20
    22c6:	8c 93       	st	X, r24
    22c8:	a2 c0       	rjmp	.+324    	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTB_Register,Copy_u8PIN);
    22ca:	a8 e3       	ldi	r26, 0x38	; 56
    22cc:	b0 e0       	ldi	r27, 0x00	; 0
    22ce:	e8 e3       	ldi	r30, 0x38	; 56
    22d0:	f0 e0       	ldi	r31, 0x00	; 0
    22d2:	80 81       	ld	r24, Z
    22d4:	48 2f       	mov	r20, r24
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	28 2f       	mov	r18, r24
    22da:	30 e0       	ldi	r19, 0x00	; 0
    22dc:	81 e0       	ldi	r24, 0x01	; 1
    22de:	90 e0       	ldi	r25, 0x00	; 0
    22e0:	02 2e       	mov	r0, r18
    22e2:	02 c0       	rjmp	.+4      	; 0x22e8 <DIO_enumConnectPullup+0x178>
    22e4:	88 0f       	add	r24, r24
    22e6:	99 1f       	adc	r25, r25
    22e8:	0a 94       	dec	r0
    22ea:	e2 f7       	brpl	.-8      	; 0x22e4 <DIO_enumConnectPullup+0x174>
    22ec:	80 95       	com	r24
    22ee:	84 23       	and	r24, r20
    22f0:	8c 93       	st	X, r24
    22f2:	8d c0       	rjmp	.+282    	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port C */
		case DIO_PORTC:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    22f4:	8c 81       	ldd	r24, Y+4	; 0x04
    22f6:	81 30       	cpi	r24, 0x01	; 1
    22f8:	71 f5       	brne	.+92     	; 0x2356 <DIO_enumConnectPullup+0x1e6>
			{
				CLR_BIT(SFIOR,PUD);
    22fa:	a0 e5       	ldi	r26, 0x50	; 80
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	e0 e5       	ldi	r30, 0x50	; 80
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	8b 7f       	andi	r24, 0xFB	; 251
    2306:	8c 93       	st	X, r24
				CLR_BIT(DDRC_Register,Copy_u8PIN);
    2308:	a4 e3       	ldi	r26, 0x34	; 52
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	e4 e3       	ldi	r30, 0x34	; 52
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	48 2f       	mov	r20, r24
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	28 2f       	mov	r18, r24
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	02 c0       	rjmp	.+4      	; 0x2324 <DIO_enumConnectPullup+0x1b4>
    2320:	88 0f       	add	r24, r24
    2322:	99 1f       	adc	r25, r25
    2324:	2a 95       	dec	r18
    2326:	e2 f7       	brpl	.-8      	; 0x2320 <DIO_enumConnectPullup+0x1b0>
    2328:	80 95       	com	r24
    232a:	84 23       	and	r24, r20
    232c:	8c 93       	st	X, r24
				SET_BIT(PORTC_Register,Copy_u8PIN);
    232e:	a5 e3       	ldi	r26, 0x35	; 53
    2330:	b0 e0       	ldi	r27, 0x00	; 0
    2332:	e5 e3       	ldi	r30, 0x35	; 53
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	80 81       	ld	r24, Z
    2338:	48 2f       	mov	r20, r24
    233a:	8b 81       	ldd	r24, Y+3	; 0x03
    233c:	28 2f       	mov	r18, r24
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	81 e0       	ldi	r24, 0x01	; 1
    2342:	90 e0       	ldi	r25, 0x00	; 0
    2344:	02 2e       	mov	r0, r18
    2346:	02 c0       	rjmp	.+4      	; 0x234c <DIO_enumConnectPullup+0x1dc>
    2348:	88 0f       	add	r24, r24
    234a:	99 1f       	adc	r25, r25
    234c:	0a 94       	dec	r0
    234e:	e2 f7       	brpl	.-8      	; 0x2348 <DIO_enumConnectPullup+0x1d8>
    2350:	84 2b       	or	r24, r20
    2352:	8c 93       	st	X, r24
    2354:	5c c0       	rjmp	.+184    	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTC_Register,Copy_u8PIN);
    2356:	a5 e3       	ldi	r26, 0x35	; 53
    2358:	b0 e0       	ldi	r27, 0x00	; 0
    235a:	e5 e3       	ldi	r30, 0x35	; 53
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	48 2f       	mov	r20, r24
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	02 2e       	mov	r0, r18
    236e:	02 c0       	rjmp	.+4      	; 0x2374 <DIO_enumConnectPullup+0x204>
    2370:	88 0f       	add	r24, r24
    2372:	99 1f       	adc	r25, r25
    2374:	0a 94       	dec	r0
    2376:	e2 f7       	brpl	.-8      	; 0x2370 <DIO_enumConnectPullup+0x200>
    2378:	80 95       	com	r24
    237a:	84 23       	and	r24, r20
    237c:	8c 93       	st	X, r24
    237e:	47 c0       	rjmp	.+142    	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			break;
			/* Connect or disconnect the pull up resistance to the given pin in port D */
		case DIO_PORTD:
			if(Copy_u8ConnectPullup==DIO_PIN_HIGH)
    2380:	8c 81       	ldd	r24, Y+4	; 0x04
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	71 f5       	brne	.+92     	; 0x23e2 <DIO_enumConnectPullup+0x272>
			{
				CLR_BIT(SFIOR,PUD);
    2386:	a0 e5       	ldi	r26, 0x50	; 80
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	e0 e5       	ldi	r30, 0x50	; 80
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	80 81       	ld	r24, Z
    2390:	8b 7f       	andi	r24, 0xFB	; 251
    2392:	8c 93       	st	X, r24
				CLR_BIT(DDRD_Register,Copy_u8PIN);
    2394:	a1 e3       	ldi	r26, 0x31	; 49
    2396:	b0 e0       	ldi	r27, 0x00	; 0
    2398:	e1 e3       	ldi	r30, 0x31	; 49
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	48 2f       	mov	r20, r24
    23a0:	8b 81       	ldd	r24, Y+3	; 0x03
    23a2:	28 2f       	mov	r18, r24
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	81 e0       	ldi	r24, 0x01	; 1
    23a8:	90 e0       	ldi	r25, 0x00	; 0
    23aa:	02 c0       	rjmp	.+4      	; 0x23b0 <DIO_enumConnectPullup+0x240>
    23ac:	88 0f       	add	r24, r24
    23ae:	99 1f       	adc	r25, r25
    23b0:	2a 95       	dec	r18
    23b2:	e2 f7       	brpl	.-8      	; 0x23ac <DIO_enumConnectPullup+0x23c>
    23b4:	80 95       	com	r24
    23b6:	84 23       	and	r24, r20
    23b8:	8c 93       	st	X, r24
				SET_BIT(PORTD_Register,Copy_u8PIN);
    23ba:	a2 e3       	ldi	r26, 0x32	; 50
    23bc:	b0 e0       	ldi	r27, 0x00	; 0
    23be:	e2 e3       	ldi	r30, 0x32	; 50
    23c0:	f0 e0       	ldi	r31, 0x00	; 0
    23c2:	80 81       	ld	r24, Z
    23c4:	48 2f       	mov	r20, r24
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	02 2e       	mov	r0, r18
    23d2:	02 c0       	rjmp	.+4      	; 0x23d8 <DIO_enumConnectPullup+0x268>
    23d4:	88 0f       	add	r24, r24
    23d6:	99 1f       	adc	r25, r25
    23d8:	0a 94       	dec	r0
    23da:	e2 f7       	brpl	.-8      	; 0x23d4 <DIO_enumConnectPullup+0x264>
    23dc:	84 2b       	or	r24, r20
    23de:	8c 93       	st	X, r24
    23e0:	16 c0       	rjmp	.+44     	; 0x240e <DIO_enumConnectPullup+0x29e>
			}
			else
			{
				CLR_BIT(PORTD_Register,Copy_u8PIN);
    23e2:	a2 e3       	ldi	r26, 0x32	; 50
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	e2 e3       	ldi	r30, 0x32	; 50
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	48 2f       	mov	r20, r24
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	28 2f       	mov	r18, r24
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	90 e0       	ldi	r25, 0x00	; 0
    23f8:	02 2e       	mov	r0, r18
    23fa:	02 c0       	rjmp	.+4      	; 0x2400 <DIO_enumConnectPullup+0x290>
    23fc:	88 0f       	add	r24, r24
    23fe:	99 1f       	adc	r25, r25
    2400:	0a 94       	dec	r0
    2402:	e2 f7       	brpl	.-8      	; 0x23fc <DIO_enumConnectPullup+0x28c>
    2404:	80 95       	com	r24
    2406:	84 23       	and	r24, r20
    2408:	8c 93       	st	X, r24
    240a:	01 c0       	rjmp	.+2      	; 0x240e <DIO_enumConnectPullup+0x29e>
		}
	}

	else
	{
		LOC_enumState = DIO_NOK ;
    240c:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    240e:	89 81       	ldd	r24, Y+1	; 0x01


}
    2410:	26 96       	adiw	r28, 0x06	; 6
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	cf 91       	pop	r28
    241e:	df 91       	pop	r29
    2420:	08 95       	ret

00002422 <DIO_voidWriteHighNibbles>:




DIO_ErrorStatus DIO_voidWriteHighNibbles(u8 Copy_u8PORT,u8 Copy_u8value)
{
    2422:	df 93       	push	r29
    2424:	cf 93       	push	r28
    2426:	00 d0       	rcall	.+0      	; 0x2428 <DIO_voidWriteHighNibbles+0x6>
    2428:	00 d0       	rcall	.+0      	; 0x242a <DIO_voidWriteHighNibbles+0x8>
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	8a 83       	std	Y+2, r24	; 0x02
    2432:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD))
    2438:	8a 81       	ldd	r24, Y+2	; 0x02
    243a:	84 30       	cpi	r24, 0x04	; 4
    243c:	08 f0       	brcs	.+2      	; 0x2440 <DIO_voidWriteHighNibbles+0x1e>
    243e:	63 c0       	rjmp	.+198    	; 0x2506 <DIO_voidWriteHighNibbles+0xe4>
	{
		Copy_u8value = (Copy_u8value<<4) ;
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	82 95       	swap	r24
    2444:	80 7f       	andi	r24, 0xF0	; 240
    2446:	8b 83       	std	Y+3, r24	; 0x03
		switch(Copy_u8PORT)
    2448:	8a 81       	ldd	r24, Y+2	; 0x02
    244a:	28 2f       	mov	r18, r24
    244c:	30 e0       	ldi	r19, 0x00	; 0
    244e:	3d 83       	std	Y+5, r19	; 0x05
    2450:	2c 83       	std	Y+4, r18	; 0x04
    2452:	8c 81       	ldd	r24, Y+4	; 0x04
    2454:	9d 81       	ldd	r25, Y+5	; 0x05
    2456:	81 30       	cpi	r24, 0x01	; 1
    2458:	91 05       	cpc	r25, r1
    245a:	29 f1       	breq	.+74     	; 0x24a6 <DIO_voidWriteHighNibbles+0x84>
    245c:	2c 81       	ldd	r18, Y+4	; 0x04
    245e:	3d 81       	ldd	r19, Y+5	; 0x05
    2460:	22 30       	cpi	r18, 0x02	; 2
    2462:	31 05       	cpc	r19, r1
    2464:	2c f4       	brge	.+10     	; 0x2470 <DIO_voidWriteHighNibbles+0x4e>
    2466:	8c 81       	ldd	r24, Y+4	; 0x04
    2468:	9d 81       	ldd	r25, Y+5	; 0x05
    246a:	00 97       	sbiw	r24, 0x00	; 0
    246c:	61 f0       	breq	.+24     	; 0x2486 <DIO_voidWriteHighNibbles+0x64>
    246e:	4c c0       	rjmp	.+152    	; 0x2508 <DIO_voidWriteHighNibbles+0xe6>
    2470:	2c 81       	ldd	r18, Y+4	; 0x04
    2472:	3d 81       	ldd	r19, Y+5	; 0x05
    2474:	22 30       	cpi	r18, 0x02	; 2
    2476:	31 05       	cpc	r19, r1
    2478:	31 f1       	breq	.+76     	; 0x24c6 <DIO_voidWriteHighNibbles+0xa4>
    247a:	8c 81       	ldd	r24, Y+4	; 0x04
    247c:	9d 81       	ldd	r25, Y+5	; 0x05
    247e:	83 30       	cpi	r24, 0x03	; 3
    2480:	91 05       	cpc	r25, r1
    2482:	89 f1       	breq	.+98     	; 0x24e6 <DIO_voidWriteHighNibbles+0xc4>
    2484:	41 c0       	rjmp	.+130    	; 0x2508 <DIO_voidWriteHighNibbles+0xe6>
		{
		case DIO_PORTA :
			PORTA_Register&=0x0f;                   // make sure the high bits = 0000
    2486:	ab e3       	ldi	r26, 0x3B	; 59
    2488:	b0 e0       	ldi	r27, 0x00	; 0
    248a:	eb e3       	ldi	r30, 0x3B	; 59
    248c:	f0 e0       	ldi	r31, 0x00	; 0
    248e:	80 81       	ld	r24, Z
    2490:	8f 70       	andi	r24, 0x0F	; 15
    2492:	8c 93       	st	X, r24
			PORTA_Register|=Copy_u8value;			//Set only the high nibble of the port A by the given value
    2494:	ab e3       	ldi	r26, 0x3B	; 59
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	eb e3       	ldi	r30, 0x3B	; 59
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	90 81       	ld	r25, Z
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	89 2b       	or	r24, r25
    24a2:	8c 93       	st	X, r24
    24a4:	31 c0       	rjmp	.+98     	; 0x2508 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTB:
			PORTB_Register&=0x0f;                 //Set only the high nibble of the port B by the given value
    24a6:	a8 e3       	ldi	r26, 0x38	; 56
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e8 e3       	ldi	r30, 0x38	; 56
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	80 81       	ld	r24, Z
    24b0:	8f 70       	andi	r24, 0x0F	; 15
    24b2:	8c 93       	st	X, r24
			PORTB_Register|=Copy_u8value;
    24b4:	a8 e3       	ldi	r26, 0x38	; 56
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	e8 e3       	ldi	r30, 0x38	; 56
    24ba:	f0 e0       	ldi	r31, 0x00	; 0
    24bc:	90 81       	ld	r25, Z
    24be:	8b 81       	ldd	r24, Y+3	; 0x03
    24c0:	89 2b       	or	r24, r25
    24c2:	8c 93       	st	X, r24
    24c4:	21 c0       	rjmp	.+66     	; 0x2508 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTC :
			PORTC_Register&=0x0f;                 //Set only the high nibble of the port C by the given value
    24c6:	a5 e3       	ldi	r26, 0x35	; 53
    24c8:	b0 e0       	ldi	r27, 0x00	; 0
    24ca:	e5 e3       	ldi	r30, 0x35	; 53
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	80 81       	ld	r24, Z
    24d0:	8f 70       	andi	r24, 0x0F	; 15
    24d2:	8c 93       	st	X, r24
			PORTC_Register|=Copy_u8value;
    24d4:	a5 e3       	ldi	r26, 0x35	; 53
    24d6:	b0 e0       	ldi	r27, 0x00	; 0
    24d8:	e5 e3       	ldi	r30, 0x35	; 53
    24da:	f0 e0       	ldi	r31, 0x00	; 0
    24dc:	90 81       	ld	r25, Z
    24de:	8b 81       	ldd	r24, Y+3	; 0x03
    24e0:	89 2b       	or	r24, r25
    24e2:	8c 93       	st	X, r24
    24e4:	11 c0       	rjmp	.+34     	; 0x2508 <DIO_voidWriteHighNibbles+0xe6>
			break ;
		case DIO_PORTD:
			PORTD_Register&=0x0f;                 //Set only the high nibble of the port D by the given value
    24e6:	a2 e3       	ldi	r26, 0x32	; 50
    24e8:	b0 e0       	ldi	r27, 0x00	; 0
    24ea:	e2 e3       	ldi	r30, 0x32	; 50
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	80 81       	ld	r24, Z
    24f0:	8f 70       	andi	r24, 0x0F	; 15
    24f2:	8c 93       	st	X, r24
			PORTD_Register|=Copy_u8value;
    24f4:	a2 e3       	ldi	r26, 0x32	; 50
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e2 e3       	ldi	r30, 0x32	; 50
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	90 81       	ld	r25, Z
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	89 2b       	or	r24, r25
    2502:	8c 93       	st	X, r24
    2504:	01 c0       	rjmp	.+2      	; 0x2508 <DIO_voidWriteHighNibbles+0xe6>

		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    2506:	19 82       	std	Y+1, r1	; 0x01
	}

	return LOC_enumState ;
    2508:	89 81       	ldd	r24, Y+1	; 0x01

}
    250a:	0f 90       	pop	r0
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	0f 90       	pop	r0
    2514:	cf 91       	pop	r28
    2516:	df 91       	pop	r29
    2518:	08 95       	ret

0000251a <DIO_enumSetPortDirection>:


DIO_ErrorStatus DIO_enumSetPortDirection   (u8 Copy_u8PORT , u8 Copy_u8Direction )
{
    251a:	df 93       	push	r29
    251c:	cf 93       	push	r28
    251e:	00 d0       	rcall	.+0      	; 0x2520 <DIO_enumSetPortDirection+0x6>
    2520:	00 d0       	rcall	.+0      	; 0x2522 <DIO_enumSetPortDirection+0x8>
    2522:	0f 92       	push	r0
    2524:	cd b7       	in	r28, 0x3d	; 61
    2526:	de b7       	in	r29, 0x3e	; 62
    2528:	8a 83       	std	Y+2, r24	; 0x02
    252a:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) )
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	84 30       	cpi	r24, 0x04	; 4
    2534:	a8 f5       	brcc	.+106    	; 0x25a0 <DIO_enumSetPortDirection+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	28 2f       	mov	r18, r24
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	3d 83       	std	Y+5, r19	; 0x05
    253e:	2c 83       	std	Y+4, r18	; 0x04
    2540:	8c 81       	ldd	r24, Y+4	; 0x04
    2542:	9d 81       	ldd	r25, Y+5	; 0x05
    2544:	81 30       	cpi	r24, 0x01	; 1
    2546:	91 05       	cpc	r25, r1
    2548:	d1 f0       	breq	.+52     	; 0x257e <DIO_enumSetPortDirection+0x64>
    254a:	2c 81       	ldd	r18, Y+4	; 0x04
    254c:	3d 81       	ldd	r19, Y+5	; 0x05
    254e:	22 30       	cpi	r18, 0x02	; 2
    2550:	31 05       	cpc	r19, r1
    2552:	2c f4       	brge	.+10     	; 0x255e <DIO_enumSetPortDirection+0x44>
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	9d 81       	ldd	r25, Y+5	; 0x05
    2558:	00 97       	sbiw	r24, 0x00	; 0
    255a:	61 f0       	breq	.+24     	; 0x2574 <DIO_enumSetPortDirection+0x5a>
    255c:	1f c0       	rjmp	.+62     	; 0x259c <DIO_enumSetPortDirection+0x82>
    255e:	2c 81       	ldd	r18, Y+4	; 0x04
    2560:	3d 81       	ldd	r19, Y+5	; 0x05
    2562:	22 30       	cpi	r18, 0x02	; 2
    2564:	31 05       	cpc	r19, r1
    2566:	81 f0       	breq	.+32     	; 0x2588 <DIO_enumSetPortDirection+0x6e>
    2568:	8c 81       	ldd	r24, Y+4	; 0x04
    256a:	9d 81       	ldd	r25, Y+5	; 0x05
    256c:	83 30       	cpi	r24, 0x03	; 3
    256e:	91 05       	cpc	r25, r1
    2570:	81 f0       	breq	.+32     	; 0x2592 <DIO_enumSetPortDirection+0x78>
    2572:	14 c0       	rjmp	.+40     	; 0x259c <DIO_enumSetPortDirection+0x82>
		{
		case     DIO_PORTA: DDRA_Register = Copy_u8Direction; break;
    2574:	ea e3       	ldi	r30, 0x3A	; 58
    2576:	f0 e0       	ldi	r31, 0x00	; 0
    2578:	8b 81       	ldd	r24, Y+3	; 0x03
    257a:	80 83       	st	Z, r24
    257c:	12 c0       	rjmp	.+36     	; 0x25a2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTB: DDRB_Register = Copy_u8Direction; break;
    257e:	e7 e3       	ldi	r30, 0x37	; 55
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	80 83       	st	Z, r24
    2586:	0d c0       	rjmp	.+26     	; 0x25a2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTC: DDRC_Register = Copy_u8Direction; break;
    2588:	e4 e3       	ldi	r30, 0x34	; 52
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	8b 81       	ldd	r24, Y+3	; 0x03
    258e:	80 83       	st	Z, r24
    2590:	08 c0       	rjmp	.+16     	; 0x25a2 <DIO_enumSetPortDirection+0x88>
		case     DIO_PORTD: DDRD_Register = Copy_u8Direction; break;
    2592:	e1 e3       	ldi	r30, 0x31	; 49
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	8b 81       	ldd	r24, Y+3	; 0x03
    2598:	80 83       	st	Z, r24
    259a:	03 c0       	rjmp	.+6      	; 0x25a2 <DIO_enumSetPortDirection+0x88>
		default: LOC_enumState =  DIO_NOK;    break;
    259c:	19 82       	std	Y+1, r1	; 0x01
    259e:	01 c0       	rjmp	.+2      	; 0x25a2 <DIO_enumSetPortDirection+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    25a0:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    25a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a4:	0f 90       	pop	r0
    25a6:	0f 90       	pop	r0
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	cf 91       	pop	r28
    25b0:	df 91       	pop	r29
    25b2:	08 95       	ret

000025b4 <DIO_enumSetPortValue>:


DIO_ErrorStatus DIO_enumSetPortValue       (u8 Copy_u8PORT , u8 Copy_u8Value )
{
    25b4:	df 93       	push	r29
    25b6:	cf 93       	push	r28
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <DIO_enumSetPortValue+0x6>
    25ba:	00 d0       	rcall	.+0      	; 0x25bc <DIO_enumSetPortValue+0x8>
    25bc:	0f 92       	push	r0
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	8a 83       	std	Y+2, r24	; 0x02
    25c4:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    25c6:	81 e0       	ldi	r24, 0x01	; 1
    25c8:	89 83       	std	Y+1, r24	; 0x01

	if ( (Copy_u8PORT <= DIO_PORTD) && ( (Copy_u8Value<=255) || (Copy_u8Value==DIO_PORT_LOW) || (Copy_u8Value==DIO_PORT_HIGH) ) )
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	84 30       	cpi	r24, 0x04	; 4
    25ce:	a8 f5       	brcc	.+106    	; 0x263a <DIO_enumSetPortValue+0x86>
	{
		/* Check on the Required PORT Number */
		switch (Copy_u8PORT)
    25d0:	8a 81       	ldd	r24, Y+2	; 0x02
    25d2:	28 2f       	mov	r18, r24
    25d4:	30 e0       	ldi	r19, 0x00	; 0
    25d6:	3d 83       	std	Y+5, r19	; 0x05
    25d8:	2c 83       	std	Y+4, r18	; 0x04
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	91 05       	cpc	r25, r1
    25e2:	d1 f0       	breq	.+52     	; 0x2618 <DIO_enumSetPortValue+0x64>
    25e4:	2c 81       	ldd	r18, Y+4	; 0x04
    25e6:	3d 81       	ldd	r19, Y+5	; 0x05
    25e8:	22 30       	cpi	r18, 0x02	; 2
    25ea:	31 05       	cpc	r19, r1
    25ec:	2c f4       	brge	.+10     	; 0x25f8 <DIO_enumSetPortValue+0x44>
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	9d 81       	ldd	r25, Y+5	; 0x05
    25f2:	00 97       	sbiw	r24, 0x00	; 0
    25f4:	61 f0       	breq	.+24     	; 0x260e <DIO_enumSetPortValue+0x5a>
    25f6:	1f c0       	rjmp	.+62     	; 0x2636 <DIO_enumSetPortValue+0x82>
    25f8:	2c 81       	ldd	r18, Y+4	; 0x04
    25fa:	3d 81       	ldd	r19, Y+5	; 0x05
    25fc:	22 30       	cpi	r18, 0x02	; 2
    25fe:	31 05       	cpc	r19, r1
    2600:	81 f0       	breq	.+32     	; 0x2622 <DIO_enumSetPortValue+0x6e>
    2602:	8c 81       	ldd	r24, Y+4	; 0x04
    2604:	9d 81       	ldd	r25, Y+5	; 0x05
    2606:	83 30       	cpi	r24, 0x03	; 3
    2608:	91 05       	cpc	r25, r1
    260a:	81 f0       	breq	.+32     	; 0x262c <DIO_enumSetPortValue+0x78>
    260c:	14 c0       	rjmp	.+40     	; 0x2636 <DIO_enumSetPortValue+0x82>
		{
		case     DIO_PORTA: PORTA_Register = Copy_u8Value; break;
    260e:	eb e3       	ldi	r30, 0x3B	; 59
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	80 83       	st	Z, r24
    2616:	12 c0       	rjmp	.+36     	; 0x263c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTB: PORTB_Register = Copy_u8Value; break;
    2618:	e8 e3       	ldi	r30, 0x38	; 56
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	8b 81       	ldd	r24, Y+3	; 0x03
    261e:	80 83       	st	Z, r24
    2620:	0d c0       	rjmp	.+26     	; 0x263c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTC: PORTC_Register = Copy_u8Value; break;
    2622:	e5 e3       	ldi	r30, 0x35	; 53
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	80 83       	st	Z, r24
    262a:	08 c0       	rjmp	.+16     	; 0x263c <DIO_enumSetPortValue+0x88>
		case     DIO_PORTD: PORTD_Register = Copy_u8Value; break;
    262c:	e2 e3       	ldi	r30, 0x32	; 50
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	8b 81       	ldd	r24, Y+3	; 0x03
    2632:	80 83       	st	Z, r24
    2634:	03 c0       	rjmp	.+6      	; 0x263c <DIO_enumSetPortValue+0x88>
		default: LOC_enumState = DIO_NOK;       break;
    2636:	19 82       	std	Y+1, r1	; 0x01
    2638:	01 c0       	rjmp	.+2      	; 0x263c <DIO_enumSetPortValue+0x88>
		}
	}
	else
	{
		LOC_enumState = DIO_NOK;
    263a:	19 82       	std	Y+1, r1	; 0x01
	}
	return LOC_enumState ;
    263c:	89 81       	ldd	r24, Y+1	; 0x01
}
    263e:	0f 90       	pop	r0
    2640:	0f 90       	pop	r0
    2642:	0f 90       	pop	r0
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <__udivmodqi4>:
    264e:	99 1b       	sub	r25, r25
    2650:	79 e0       	ldi	r23, 0x09	; 9
    2652:	04 c0       	rjmp	.+8      	; 0x265c <__udivmodqi4_ep>

00002654 <__udivmodqi4_loop>:
    2654:	99 1f       	adc	r25, r25
    2656:	96 17       	cp	r25, r22
    2658:	08 f0       	brcs	.+2      	; 0x265c <__udivmodqi4_ep>
    265a:	96 1b       	sub	r25, r22

0000265c <__udivmodqi4_ep>:
    265c:	88 1f       	adc	r24, r24
    265e:	7a 95       	dec	r23
    2660:	c9 f7       	brne	.-14     	; 0x2654 <__udivmodqi4_loop>
    2662:	80 95       	com	r24
    2664:	08 95       	ret

00002666 <__prologue_saves__>:
    2666:	2f 92       	push	r2
    2668:	3f 92       	push	r3
    266a:	4f 92       	push	r4
    266c:	5f 92       	push	r5
    266e:	6f 92       	push	r6
    2670:	7f 92       	push	r7
    2672:	8f 92       	push	r8
    2674:	9f 92       	push	r9
    2676:	af 92       	push	r10
    2678:	bf 92       	push	r11
    267a:	cf 92       	push	r12
    267c:	df 92       	push	r13
    267e:	ef 92       	push	r14
    2680:	ff 92       	push	r15
    2682:	0f 93       	push	r16
    2684:	1f 93       	push	r17
    2686:	cf 93       	push	r28
    2688:	df 93       	push	r29
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
    268e:	ca 1b       	sub	r28, r26
    2690:	db 0b       	sbc	r29, r27
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	de bf       	out	0x3e, r29	; 62
    2698:	0f be       	out	0x3f, r0	; 63
    269a:	cd bf       	out	0x3d, r28	; 61
    269c:	09 94       	ijmp

0000269e <__epilogue_restores__>:
    269e:	2a 88       	ldd	r2, Y+18	; 0x12
    26a0:	39 88       	ldd	r3, Y+17	; 0x11
    26a2:	48 88       	ldd	r4, Y+16	; 0x10
    26a4:	5f 84       	ldd	r5, Y+15	; 0x0f
    26a6:	6e 84       	ldd	r6, Y+14	; 0x0e
    26a8:	7d 84       	ldd	r7, Y+13	; 0x0d
    26aa:	8c 84       	ldd	r8, Y+12	; 0x0c
    26ac:	9b 84       	ldd	r9, Y+11	; 0x0b
    26ae:	aa 84       	ldd	r10, Y+10	; 0x0a
    26b0:	b9 84       	ldd	r11, Y+9	; 0x09
    26b2:	c8 84       	ldd	r12, Y+8	; 0x08
    26b4:	df 80       	ldd	r13, Y+7	; 0x07
    26b6:	ee 80       	ldd	r14, Y+6	; 0x06
    26b8:	fd 80       	ldd	r15, Y+5	; 0x05
    26ba:	0c 81       	ldd	r16, Y+4	; 0x04
    26bc:	1b 81       	ldd	r17, Y+3	; 0x03
    26be:	aa 81       	ldd	r26, Y+2	; 0x02
    26c0:	b9 81       	ldd	r27, Y+1	; 0x01
    26c2:	ce 0f       	add	r28, r30
    26c4:	d1 1d       	adc	r29, r1
    26c6:	0f b6       	in	r0, 0x3f	; 63
    26c8:	f8 94       	cli
    26ca:	de bf       	out	0x3e, r29	; 62
    26cc:	0f be       	out	0x3f, r0	; 63
    26ce:	cd bf       	out	0x3d, r28	; 61
    26d0:	ed 01       	movw	r28, r26
    26d2:	08 95       	ret

000026d4 <_exit>:
    26d4:	f8 94       	cli

000026d6 <__stop_program>:
    26d6:	ff cf       	rjmp	.-2      	; 0x26d6 <__stop_program>
